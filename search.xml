<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力学基础梳理</title>
      <link href="/2024/01/19/li-xue-ji-chu-shu-li/"/>
      <url>/2024/01/19/li-xue-ji-chu-shu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="力学基础梳理"><a href="#力学基础梳理" class="headerlink" title="力学基础梳理"></a>力学基础梳理</h1><h2 id="剪力图和弯矩图"><a href="#剪力图和弯矩图" class="headerlink" title="剪力图和弯矩图"></a>剪力图和弯矩图</h2><ul><li><p>定义使其作用的构件产生顺时针旋转的剪力为正。</p></li><li><p>定义使构件上部受到压缩的弯矩为正，正弯矩使构件产生向上凹的变形。</p></li><li><p>弯矩图正坐标向下</p></li><li><p>连接两个杆端的刚结点,若结点上无外力偶作用,则两个杆端的弯矩值相等,方向相反.</p></li></ul><h2 id="惯性矩"><a href="#惯性矩" class="headerlink" title="惯性矩"></a>惯性矩</h2><ul><li><p>$正交坐标系公式：I_{z}=\int_A y^{2} \, dA$</p></li><li><p>$极惯性矩公式：I_{p}=\int_A \rho^{2} \, dA$</p></li><li><p>$矩形截面惯性矩：I_{z}=\frac{bh^{3}}{12}$</p></li><li><p>$圆形截面惯性矩：I_{z}=\frac{\pi}{12}R^{4}$</p></li></ul><h2 id="平均正应力"><a href="#平均正应力" class="headerlink" title="平均正应力"></a>平均正应力</h2><script type="math/tex; mode=display">\sigma = \frac{P}{A}</script><ul><li>$\sigma$ 是被积函数上的点上的平均应力分布</li><li>$P$ 是沿向内力的合力</li><li>$A$ 是被积函数区域</li></ul><h2 id="平均剪应力"><a href="#平均剪应力" class="headerlink" title="平均剪应力"></a>平均剪应力</h2><script type="math/tex; mode=display">\tau_{avg} = \frac{V}{A}</script><ul><li>$τ_{avg}$ — 平均剪应力</li><li>$V$ — 剪应力方向施加在截面上的剪力 </li><li>$A$ — 截面积</li></ul><h2 id="许用应力"><a href="#许用应力" class="headerlink" title="许用应力"></a>许用应力</h2><ul><li><p>所选的许用荷载要小于构件所能承受的极限荷载</p></li><li><p>目前设计中常用的一种方法是安全系数法(F.S.)</p></li></ul><script type="math/tex; mode=display">F.S. = \frac{F_{\text{fail}}}{F_{\text{allow}}}</script><ul><li><p>任何截面的平均应力都不能超过</p><p>安全系数$F.S.$ ×许用应力$σ_{allow}$ 或$τ_{allow}$</p></li></ul><h2 id="正应变"><a href="#正应变" class="headerlink" title="正应变"></a>正应变</h2><script type="math/tex; mode=display">\varepsilon_{avg} = \frac{\Delta s' - \Delta s}{\Delta s}</script><script type="math/tex; mode=display">\sigma = E \varepsilon</script><h2 id="剪应变"><a href="#剪应变" class="headerlink" title="剪应变"></a>剪应变</h2><script type="math/tex; mode=display">\gamma_{nt}=\frac{\pi}{2}-\theta^{'}</script><script type="math/tex; mode=display">τ = Gγ</script><h2 id="泊松比"><a href="#泊松比" class="headerlink" title="泊松比"></a>泊松比</h2><script type="math/tex; mode=display">\nu=-\frac{\varepsilon_{lat}}{\varepsilon_{long}}</script><script type="math/tex; mode=display">\nu=-\frac{\varepsilon_{横向}}{\varepsilon_{纵向}}</script><p>三个材料常数<em>E</em>, <em>ν</em>, 和 <em>G</em>关系如下</p><script type="math/tex; mode=display">G=\frac{E}{2(1+\nu)}</script><h2 id="轴向弹力变形"><a href="#轴向弹力变形" class="headerlink" title="轴向弹力变形"></a>轴向弹力变形</h2><h3 id="一般情形"><a href="#一般情形" class="headerlink" title="一般情形"></a>一般情形</h3><script type="math/tex; mode=display">\delta = \int_{0}^{L} \frac{P(x)}{A(x) E} \, dx</script><p>其中：</p><ul><li>$\delta$= 两点之间的相对位移</li><li>L = 两点间的距离</li><li>P(x) =与一端相距x处的截面轴力（内力）</li><li>A(x) = 杆件的截面积，表示为 <em>x</em> 的函数</li><li>E = 材料的弹性模量</li></ul><h3 id="等截面均质杆件"><a href="#等截面均质杆件" class="headerlink" title="等截面均质杆件"></a>等截面均质杆件</h3><script type="math/tex; mode=display">\delta =  \frac{PL}{A E}</script><h2 id="温度应力"><a href="#温度应力" class="headerlink" title="温度应力"></a>温度应力</h2><p>由试验可知，长度为 的杆件其变形或长度变化量为</p><script type="math/tex; mode=display">\delta_{T}=\alpha\Delta TL</script><ul><li>$\delta_{T}$=杆长改变量</li><li>$\alpha$=线性膨胀系数。表示每摄氏度温度变化引起应变的量：1摄氏度 or 1/开尔文 or 1/华氏度</li><li>$ \Delta T $= 杆件的温度变化量</li><li>$L$= 初始杆长</li></ul><h2 id="弯曲正应力"><a href="#弯曲正应力" class="headerlink" title="弯曲正应力"></a>弯曲正应力</h2><h3 id="直杆的纯弯曲变形"><a href="#直杆的纯弯曲变形" class="headerlink" title="直杆的纯弯曲变形"></a>直杆的纯弯曲变形</h3><script type="math/tex; mode=display">\varepsilon = -\frac{y}{c}\varepsilon_{max}</script><h3 id="弯曲正应力公式"><a href="#弯曲正应力公式" class="headerlink" title="弯曲正应力公式"></a>弯曲正应力公式</h3><script type="math/tex; mode=display">\sigma_{\text{max}} = -\frac{Mc}{I_z}\\\sigma = - \frac{My}{I_z}</script><h3 id="剪切公式"><a href="#剪切公式" class="headerlink" title="剪切公式"></a>剪切公式</h3><script type="math/tex; mode=display">\tau = \frac{VS}{It}</script><p>其中：</p><ul><li><p>( $\tau$ ) 代表剪应力。</p></li><li><p>( V ) 是剪力，即作用于横截面的力。</p></li><li><p>( S) 是静距，即到考虑点至剪切面积的重心的垂直距离与剪切面积的乘积。</p><script type="math/tex; mode=display">S = \int_{A'} y \, dA' = y' \bar{A'}</script><p><em>A’</em>是杆件横截面上距离中和轴为y’的横线以外的面积</p><p>y’是A’面积的形心到中和轴的距离</p></li><li><p>( I ) 整个横截面对于中性轴的惯性矩</p></li><li><p>( t ) 是杆件在要求$\tau$ 的点处的横截面宽度</p></li></ul><p>关于S的例子：</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20231231160944893.png" alt="image-20231231160944893"></p><h2 id="梁的变形"><a href="#梁的变形" class="headerlink" title="梁的变形"></a>梁的变形</h2><h3 id="曲率"><a href="#曲率" class="headerlink" title="曲率"></a>曲率</h3><script type="math/tex; mode=display">\kappa = \frac{M}{EI_z}</script><h3 id="转角和挠度"><a href="#转角和挠度" class="headerlink" title="转角和挠度"></a>转角和挠度</h3><script type="math/tex; mode=display">\kappa=\frac{1}{\rho} = \frac{d\theta}{dx} = \frac{d^2 \nu}{dx^2}</script><p>从而推出</p><script type="math/tex; mode=display">\theta = \frac{dv}{dx} = \int \frac{M(x)}{EI} \, dx + C</script><script type="math/tex; mode=display">v = \iint \frac{M(x)}{EI} \, dx \, dx + Cx + D</script><h3 id="叠加原理"><a href="#叠加原理" class="headerlink" title="叠加原理"></a>叠加原理</h3><p>叠加原理表明，将荷载分为几部分，先将各部分荷载分别作用在构件上，求出每部分载荷引起的应力或位移，将以上结果相加，即可得到总的应力或位移。</p><h2 id="扭矩图"><a href="#扭矩图" class="headerlink" title="扭矩图"></a>扭矩图</h2><ul><li>方向：右手定则，四手指沿着扭矩或转角的旋转方向握拳，若拇指指向纵轴的横截面向外，则扭矩为正；反之为负。</li></ul><h2 id="扭转公式"><a href="#扭转公式" class="headerlink" title="扭转公式"></a>扭转公式</h2><script type="math/tex; mode=display">\tau = \frac{T \rho}{J}</script><script type="math/tex; mode=display">\tau_{\text{max}} = \frac{T c}{J}</script><ul><li>$\tau$ 表示扭转应力。</li><li>$\tau_{\text{max}}$ 表示杆上的最大扭转应力（也称为最大剪应力），发生在杆的最外围。</li><li>$T$ 是作用在杆或轴上的扭矩，可由扭转引起的力矩表示。</li><li>$\rho$ 是从杆的中心到考虑点的距离。</li><li>$c$ 是杆的外径，即从杆的中心到杆的最外边缘的距离。</li><li>$J$ 是杆截面的极惯性矩，它是截面对抗扭转的几何特性的度量。</li></ul><h2 id="扭转角"><a href="#扭转角" class="headerlink" title="扭转角"></a>扭转角</h2><script type="math/tex; mode=display">\phi = \int_{0}^{L} \frac{T(x)}{J(x)G(x)} \, dx</script><p>$\phi$ = 扭转角，单位为弧度</p><p>$T(x)$ = 在截面 $x$ 处梁或轴的扭矩，由扭转引起的力矩表示</p><p>$J(x)$ = 截面 $x$ 处的极惯性矩，对抗扭转的截面特性</p><p>$G$ = 剪切模量，描述材料抵抗剪切变形的能力</p><p>一般用</p><script type="math/tex; mode=display">\phi=\frac{TL}{JG}</script><h2 id="摩尔圆"><a href="#摩尔圆" class="headerlink" title="摩尔圆"></a>摩尔圆</h2><p>圆的方程为</p><script type="math/tex; mode=display">\left[ \sigma_{\theta} - \left( \frac{\sigma_x + \sigma_y}{2} \right)^2 \right] + \tau_{\theta}^2 = \left( \frac{\sigma_x - \sigma_y}{2} \right)^2 + \tau_{xy}^2</script><ul><li>摩尔圆的应用</li><li><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20231231171133717.png" alt="image-20231231171133717"></li></ul><h2 id="压杆稳定"><a href="#压杆稳定" class="headerlink" title="压杆稳定"></a>压杆稳定</h2><h3 id="一般公式"><a href="#一般公式" class="headerlink" title="一般公式"></a>一般公式</h3><h1 id="欧拉临界载荷公式"><a href="#欧拉临界载荷公式" class="headerlink" title="欧拉临界载荷公式"></a>欧拉临界载荷公式</h1><p>欧拉临界载荷公式表示为：</p><script type="math/tex; mode=display">P_{cr} = \frac{\pi^2 EI}{(KL)^2}</script><p>其中：</p><ul><li><script type="math/tex">P_{cr}</script> 是构件失稳前的临界轴向载荷。</li><li><script type="math/tex">E</script> 是材料的弹性模量。</li><li><script type="math/tex">I</script> 是截面的惯性矩。</li><li><script type="math/tex">L</script> 是构件的长度。</li><li><script type="math/tex">K</script> 是柱子长度系数，用于考虑边界条件对临界载荷的影响。<ul><li>两端铰接压杆：K=1</li><li>一端固定一端自由压杆: K=2</li><li>两端固定压杆：K=0.5</li><li>一端铰接一端固定压杆:K=0.7</li></ul></li></ul><h3 id="铰接理想压杆"><a href="#铰接理想压杆" class="headerlink" title="铰接理想压杆"></a>铰接理想压杆</h3><script type="math/tex; mode=display"> \sigma_{cr} = \frac{\pi^2 E}{(L/r)^2}</script><p>其中： </p><ul><li><script type="math/tex">\sigma_{cr}</script> 是临界应力，屈曲失稳前的最大应力，也是理论应力。 </li><li><script type="math/tex">E</script> 是材料的弹性模量。 </li><li><script type="math/tex">L</script> 是杆件的长度。 </li><li><script type="math/tex">r</script> 是截面的最小回转半径。</li><li><script type="math/tex">L/r</script> 是杆件的长度与最小回转半径的比值，也称为杆件的长细比。</li></ul><h2 id="虚功原理"><a href="#虚功原理" class="headerlink" title="虚功原理"></a>虚功原理</h2><script type="math/tex; mode=display">\Delta = \sum \int \left( \frac{ \overline{M}M_P}{EI} + \frac{ \overline{F_N}F_{NP}}{EA} + \frac{k\overline{F_Q}F_{QP}}{GA} \right) \mathrm{d}s</script><h3 id="图乘法"><a href="#图乘法" class="headerlink" title="图乘法"></a>图乘法</h3><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20231231183131296.png" alt="image-20231231183131296"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ics内容整理</title>
      <link href="/2024/01/19/ics-nei-rong-zheng-li/"/>
      <url>/2024/01/19/ics-nei-rong-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="ICS"><a href="#ICS" class="headerlink" title="ICS"></a>ICS</h1><h2 id="十六进制快速查表"><a href="#十六进制快速查表" class="headerlink" title="十六进制快速查表"></a>十六进制快速查表</h2><div class="table-container"><table><thead><tr><th>十六进制</th><th>十进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0000</td></tr><tr><td>1</td><td>1</td><td>0001</td></tr><tr><td>2</td><td>2</td><td>0010</td></tr><tr><td>3</td><td>3</td><td>0011</td></tr><tr><td>4</td><td>4</td><td>0100</td></tr><tr><td>5</td><td>5</td><td>0101</td></tr><tr><td>6</td><td>6</td><td>0110</td></tr><tr><td>7</td><td>7</td><td>0111</td></tr><tr><td>8</td><td>8</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>1001</td></tr><tr><td>A</td><td>10</td><td>1010</td></tr><tr><td>B</td><td>11</td><td>1011</td></tr><tr><td>C</td><td>12</td><td>1100</td></tr><tr><td>D</td><td>13</td><td>1101</td></tr><tr><td>E</td><td>14</td><td>1110</td></tr><tr><td>F</td><td>15</td><td>1111</td></tr></tbody></table></div><h2 id="printf-函数用法"><a href="#printf-函数用法" class="headerlink" title="printf()函数用法"></a>printf()函数用法</h2><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\bc527755d3b8da277aa53daebdb8061.png" alt="bc527755d3b8da277aa53daebdb8061"></p><ul><li>%f 浮点数</li><li>%p 指针地址</li></ul><h2 id="各类型比特数"><a href="#各类型比特数" class="headerlink" title="各类型比特数"></a>各类型比特数</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\1703667638895.png" alt="1703667638895"></h2><h2 id="Shift-Operations"><a href="#Shift-Operations" class="headerlink" title="Shift Operations"></a>Shift Operations</h2><ul><li>logical shift  : Fill with 0’s on left</li><li><p>Arithmetic shift : Replicate most significant bit on right</p></li><li><p>Be careful about1&lt;&lt;2 + 3&lt;&lt;4  means 1&lt;&lt;(2 + 3)&lt;&lt;4 </p></li></ul><h2 id="Big-Small-Endian（for-0x1234567）"><a href="#Big-Small-Endian（for-0x1234567）" class="headerlink" title="Big/Small Endian（for 0x1234567）"></a>Big/Small Endian（for 0x1234567）</h2><ul><li>big endian：01 23 45 67</li><li>small endian: 67 45 23 01</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul><li>strlen（）不包含结尾空字符</li></ul><h2 id="Numeric-Range"><a href="#Numeric-Range" class="headerlink" title="Numeric Range"></a>Numeric Range</h2><ul><li>Unsigned Values</li></ul><script type="math/tex; mode=display">U_{min}=0\newlineU_{max}=2^{w}-1</script><ul><li>Two’s Complement Values<script type="math/tex; mode=display">T_{min}=-2^{w-1}\newlineT_{max}=2^{w-1}-1</script></li></ul><h2 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h2><ul><li><p>Casting among Signed and Unsigned</p><ul><li>关键点是二进制表示不会变</li><li>If mix unsigned and signed in single expression,signed values implicitly cast to unsigned.</li></ul></li><li><p>From long to short</p><ul><li>unsigned直接在左边+0</li><li>signed在左边+符号位</li></ul></li><li>从short转化为unsigned<ul><li>先改变大小</li><li>再完成有符号数到无符号数的转换</li></ul></li></ul><h2 id="Unsigned-Addition"><a href="#Unsigned-Addition" class="headerlink" title="Unsigned Addition"></a>Unsigned Addition</h2><ul><li>加法公式</li></ul><script type="math/tex; mode=display">UAdd_w(u, v) =\begin{cases}u + v & \text{if } u + v < 2^w \\u + v - 2^w & \text{if } u + v \geq 2^w\end{cases}</script><ul><li><p>检验是否溢出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Determine whether arguments can be added without overflow */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">uadd_ok</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (X+Y) &lt; X</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Signed-Addition"><a href="#Signed-Addition" class="headerlink" title="Signed Addition"></a>Signed Addition</h2><ul><li><p>加法公式</p><script type="math/tex; mode=display">T_{\text{add}}(u, v) =\begin{cases}u + v - 2^w, & \text{if } T_{\text{Max}_w} < u + v \text{ (PosOver)} \\u + v, & \text{if } T_{\text{Min}_w} \leq u + v \leq T_{\text{Max}_w} \\u + v + 2^w, & \text{if } u + v < T_{\text{Min}_w} \text{ (NegOver)}\end{cases}</script></li><li><p>检验是否溢出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Determine whether arguments can be added without overflow */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">tadd_ok</span><span class="params">(<span class="type">signed</span> u, <span class="type">signed</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (u&lt;<span class="number">0</span> == v&lt;<span class="number">0</span>) &amp;&amp; (u&lt;<span class="number">0</span> != s&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Multiplication"><a href="#Multiplication" class="headerlink" title="Multiplication"></a>Multiplication</h2><ul><li><p>Unsigned</p><p>$x \ast^u_w y = (x \cdot y) \mod 2^w$</p></li><li><p>Signed</p><p>$x \ast^t_w y = U2T_w((x \cdot y) \mod 2^w)$</p></li></ul><h2 id="Addressing-Mode"><a href="#Addressing-Mode" class="headerlink" title="Addressing Mode"></a>Addressing Mode</h2><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\b8d9be0b9a5703de91c9fd2f384694f.png" alt="b8d9be0b9a5703de91c9fd2f384694f"></p><h2 id="rip-rsp"><a href="#rip-rsp" class="headerlink" title="%rip %rsp"></a>%rip %rsp</h2><ul><li>rip是程序计数器，指向下一条指令</li><li>rsp指向堆栈的栈顶 </li></ul><h2 id="Move-data"><a href="#Move-data" class="headerlink" title="Move data"></a>Move data</h2><ul><li><strong>mov</strong>: 这是一个通用的移动指令，可以根据上下文移动不同大小的数据。</li><li><strong>movb</strong>: 这个指令用于移动一个字节（8位）的数据。</li><li><strong>movw</strong>: 用于移动一个字（16位）的数据。</li><li><strong>movl</strong>: 移动一个双字（32位）的数据。</li><li><strong>movq</strong>: 移动一个四字（64位）的数据。这里的注释说明立即数（即直接指定的数值）只能被表示为32位有符号的整数，并且会被符号扩展到目标寄存器的大小。</li><li><strong>movabsq</strong>: 这是一个特殊的指令，用于移动一个绝对的四字（64位）数据。在某些架构中，这允许直接指定64位的地址或立即数。</li></ul><ul><li>大多数这些指令只更新特定的寄存器字节，除了<strong>movl</strong>。<strong>movl</strong>在移动32位数据时会将目标寄存器的高4字节置零。</li></ul><h2 id="Move-with-Zero-Extension"><a href="#Move-with-Zero-Extension" class="headerlink" title="Move with Zero Extension"></a>Move with Zero Extension</h2><ul><li>Move data instruction<ul><li><code>movz</code> (move with zero extension)</li><li><code>movzbw</code> (move zero-extension byte to word)</li><li><code>movzbl</code> (move zero-extension byte to double word)</li><li><code>movzbq</code> (move zero-extension byte to quad word)</li><li><code>movzwl</code> (move zero-extension word to double word)</li><li><code>movzwq</code> (move zero-extension word to quad word)</li><li>no <code>movzlq</code>, it is implemented by <code>movl</code></li></ul></li></ul><h2 id="Move-with-Sign-Extension"><a href="#Move-with-Sign-Extension" class="headerlink" title="Move with Sign Extension"></a>Move with Sign Extension</h2><ul><li>Move data instruction<ul><li><code>movs</code> (move with sign extension)</li><li><code>movsbw</code> (move sign-extension byte to word)</li><li><code>movsbl</code> (move sign-extension byte to double word)</li><li><code>movsbq</code> (move sign-extension byte to quad word)</li><li><code>movswl</code> (move sign-extension word to double word)</li><li><code>movswq</code> (move sign-extension word to quad word)</li><li><code>movslq</code> (move sign-extension double word to quad word)</li></ul></li></ul><h2 id="Data-Manipulation"><a href="#Data-Manipulation" class="headerlink" title="Data Manipulation"></a>Data Manipulation</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\dd664a61579d2f1eac5b7a498a6dc24.png" alt="dd664a61579d2f1eac5b7a498a6dc24"></h2><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\dd45870dbe6cac9707e712ccc8b8ee1.png" alt="dd45870dbe6cac9707e712ccc8b8ee1"></p><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\f42466ffee546fdad7a1a5d6e811adc.png" alt="f42466ffee546fdad7a1a5d6e811adc"></p><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><ul><li>案例数量多</li><li>案例值不稀疏</li></ul><h2 id="Invoke-callee-call"><a href="#Invoke-callee-call" class="headerlink" title="Invoke callee: call"></a>Invoke callee: call</h2><p>两个作用：</p><ul><li>将下一个地址（return address）压栈</li><li>跳转到函数的起始地址</li></ul><h2 id="Return-to-caller-ret"><a href="#Return-to-caller-ret" class="headerlink" title="Return to caller: ret"></a>Return to caller: ret</h2><p>两个作用：</p><ul><li>退栈，从栈中取出返回地址</li><li>跳转到返回地址</li></ul><h2 id="Passing-Data-Arguments-amp-Return-Value"><a href="#Passing-Data-Arguments-amp-Return-Value" class="headerlink" title="Passing Data: Arguments &amp; Return Value"></a>Passing Data: Arguments &amp; Return Value<img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\675c99b421060be15aafabe6fae8503.png" alt="675c99b421060be15aafabe6fae8503"></h2><ul><li>如果参数多于6个，那么从第n个到第7个依次压栈（在retaddress前）</li></ul><h2 id="Registers-usage-convention"><a href="#Registers-usage-convention" class="headerlink" title="Registers: usage convention"></a>Registers: usage convention</h2><p><strong>caller-save registers</strong></p><ul><li>%rax, %rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11</li><li>Callee can use these registers freely</li></ul><p><strong>Callee-save registers</strong></p><ul><li>%rbx, %rbp, %r12-15</li><li>Saved by callee</li></ul><h2 id="Local-variable-stack"><a href="#Local-variable-stack" class="headerlink" title="Local variable: stack"></a>Local variable: stack</h2><p><strong>Why are local variables not stored in registers ?</strong></p><ul><li>No enough registers</li><li>Array and structures (e.g., a[2])</li><li>Need address (e.g., &amp;a)</li></ul><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><ol><li>Save caller-save registers (%eax, %edx, %ecx)</li><li>Push rest actual arguments from right to left onto stack</li><li>Pass first six actual arguments </li><li>Call instructionSave return addressTransfer control to callee</li><li>Save callee-save registers (%rbx, %rbp, . . .)</li><li>Allocate space for local variables</li></ol><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\c8d1001136b88969cf1ebba3091efea.png" alt="c8d1001136b88969cf1ebba3091efea"></p><p>n-3. save return value in %rax</p><p>n-2. de-allocate local variable</p><p>n-1. Restore callee-save registers   </p><p>n. Ret instruction</p><p>​    pop return address</p><p>​    Transfer control to caller</p><h2 id="Pointer-Arithmetic"><a href="#Pointer-Arithmetic" class="headerlink" title="Pointer Arithmetic"></a>Pointer Arithmetic</h2><ul><li>&amp;E[i]-E的取值为long类型，value为i</li></ul><h2 id="Nested-Array"><a href="#Nested-Array" class="headerlink" title="Nested Array"></a>Nested Array</h2><p>对二维数组D [R] [C]</p><p>D[I] [J]的地址为$x_{D} + L <em> ( C </em> i + j )$</p><h2 id="C-operators-优先级"><a href="#C-operators-优先级" class="headerlink" title="C operators 优先级"></a>C operators 优先级</h2><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\4de5fc5a3d5ae7a1a53099cacd40a2e.png" alt="4de5fc5a3d5ae7a1a53099cacd40a2e"></p><h2 id="Classes-of-Exceptions"><a href="#Classes-of-Exceptions" class="headerlink" title="Classes of Exceptions"></a>Classes of Exceptions</h2><h3 id="Synchronous-exceptions"><a href="#Synchronous-exceptions" class="headerlink" title="Synchronous exceptions"></a>Synchronous exceptions</h3><h4 id="Traps"><a href="#Traps" class="headerlink" title="Traps"></a>Traps</h4><ul><li>Intentional（故意的）</li><li>returns control to “next” instruction</li><li>Examples: <strong>syscall, breakpoint traps</strong></li></ul><h4 id="Faults"><a href="#Faults" class="headerlink" title="Faults"></a>Faults</h4><ul><li>Unintentional but possibly recoverable </li><li>either re-executes faulting (“current”) instruction or aborts.</li><li>Examples: <strong>page faults</strong> (recoverable), <strong>protection faults</strong> (unrecoverable)</li></ul><h4 id="Aborts"><a href="#Aborts" class="headerlink" title="Aborts"></a>Aborts</h4><ul><li>Unintentional and unrecoverable</li><li>aborts current program</li><li>Examples: <strong>parity error</strong>（奇偶校验错误）, <strong>machine check</strong></li></ul><h4 id="Exceptions-in-x86-64-systems"><a href="#Exceptions-in-x86-64-systems" class="headerlink" title="Exceptions in x86-64 systems"></a>Exceptions in x86-64 systems</h4><div class="table-container"><table><thead><tr><th>Exception Number</th><th>Description</th><th>Exception class</th></tr></thead><tbody><tr><td>0</td><td>Divide error</td><td>Fault</td></tr><tr><td>13</td><td>General protection fault</td><td>Fault</td></tr><tr><td>14</td><td>Page fault</td><td>Fault</td></tr><tr><td>18</td><td>Machine check</td><td>Abort</td></tr><tr><td>32~255</td><td>OS defined exception</td><td>Interrupt or trap</td></tr></tbody></table></div><h3 id="Asynchronous-exceptions-interrupts"><a href="#Asynchronous-exceptions-interrupts" class="headerlink" title="Asynchronous exceptions (interrupts)"></a>Asynchronous exceptions (interrupts)</h3><p>由处理器外部事件引起</p><p>通过设置处理器的中断引脚指示</p><p>处理程序返回到“下一个”指令。</p><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h4><ul><li><p>I/O interrupts</p><ul><li>hitting ctl-c at the keyboard</li><li>arrival of a packet from a network</li><li>arrival of a data sector from a disk</li></ul></li><li><p>Hard reset interrupt</p><ul><li>hitting the reset button</li></ul></li><li><p>Soft reset interrupt</p><ul><li>hitting ctl-alt-delete on a PC</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="C:\Users\23861\Desktop\期末复习\计算机系统基础（1）\picture_source\20ed2a5103c5dee04f7e2e1de7ca65c.png" alt="20ed2a5103c5dee04f7e2e1de7ca65c"></p><h2 id="Context-Switches"><a href="#Context-Switches" class="headerlink" title="Context Switches"></a>Context Switches</h2><ul><li>Context contains<ul><li>the program’s code and data stored in memory</li><li>Value of PC, register file, status registers</li><li>user’s stack, kernel’s stack</li><li>environment variables</li><li>Kernel data structures<ul><li>Process table</li><li>page table</li><li>file table</li></ul></li></ul></li></ul><h3 id="gpt-about"><a href="#gpt-about" class="headerlink" title="gpt about"></a>gpt about</h3><ol><li><strong>进程的上下文</strong>：内核为每个进程维护一个上下文。这个上下文是内核需要恢复被中断进程的状态。它包含了程序在内存中的代码和数据、PC寄存器的值、状态寄存器、用户栈和内核栈、环境变量以及内核数据结构（如进程表、页表、文件表）。</li><li><strong>上下文切换的必要性</strong>：在一台计算机系统中同时存在许多进程。上下文切换是操作系统执行的一种多任务（时间分片）机制，它是一种高级形式的异常控制流，建立在更低级别的机制之上。</li><li><strong>上下文切换的发生时机</strong>：当内核代表用户执行系统调用（如read、sleep等）时，这些调用可能会导致调用的进程被阻塞。即使系统调用不会导致阻塞，内核也可以决定执行上下文切换而不是将控制权返回给调用进程。上下文切换也可能由中断引起，如定时器中断。</li><li><strong>上下文切换的过程</strong>：调度程序（内核的一部分）负责决定是否抢占当前进程。在执行过程中，它会保存当前进程的上下文，恢复之前被抢占进程的上下文，并将控制权传递给这个新恢复的进程。</li><li><strong>逻辑控制流</strong>：每个进程都有自己的逻辑控制流，不会影响其他进程的状态。并发进程是指在时间上重叠的流程。尽管在时间上物理分离，我们可以将并发进程视为并行运行。</li></ol><h2 id="Concurrent-processes"><a href="#Concurrent-processes" class="headerlink" title="Concurrent processes"></a>Concurrent processes</h2><ul><li>如果两个进程有交叉，那么就是concurrent</li><li>如果没有交叉，那么就是sequential</li></ul><h2 id="Fork-Function"><a href="#Fork-Function" class="headerlink" title="Fork Function"></a>Fork Function</h2><p>pid_t fork(void);</p><p><strong>Returns: 0 to child, PID of child to parent, -1 on error</strong></p><p><strong>分离但重复的地址空间</strong>：当父进程执行 <code>fork</code> 函数时，它会创建一个子进程。在这个过程中，子进程获得了与父进程几乎完全相同的地址空间的副本。这意味着在 <code>fork</code> 调用之后，父进程和子进程拥有相同的内存布局，但这些内存是分开的，互不影响。父进程和子进程的地址空间是分离的，修改其中一个进程中的数据不会影响另一个进程。</p><p><strong><code>fork</code> 返回时的局部变量状态</strong>：以一个具体的例子来说，假设有一个局部变量 <code>x</code>，其初始值为1。当 <code>fork</code> 函数被调用时，在父进程和子进程中，<code>x</code> 的值都是1。这是因为子进程复制了父进程的整个地址空间，包括所有变量的当前状态。但在 <code>fork</code> 之后，父进程和子进程中的 <code>x</code> 是完全独立的，它们位于各自独立的地址空间内。在父进程或子进程中对 <code>x</code> 进行修改，不会影响另一个进程中 <code>x</code> 的值。</p><h2 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid"></a>waitpid</h2><h3 id="pid-t-waitpid-pid-t-pid-int-status-int-options"><a href="#pid-t-waitpid-pid-t-pid-int-status-int-options" class="headerlink" title="pid_t waitpid(pid_t pid, int *status, int options);"></a>pid_t waitpid(pid_t pid, int *status, int options);</h3><h4 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h4><ul><li>pid &gt; 0：等待的子进程的id就是pid</li><li>pid = -1：等待任意一个子进程</li></ul><h4 id="options"><a href="#options" class="headerlink" title="options"></a>options</h4><ul><li><p>options = 0</p><ul><li><p>waitpid挂起调用进程的执行，直到其等待集中的子进程终止为止</p></li><li><p>如果等待集中的进程在调用时已经终止，那么waitpid将立即返回waitpid返回导致waitpid的终止子级的PID</p></li><li><p>终止的子项将从系统中删除</p></li></ul></li><li><p>options = WNOHANG 如果等待集中的子进程尚未终止，则立即返回（返回值为0）</p></li><li><p>options = WUNTRACED 暂停执行调用进程，直到进程终止或停止导致返回的子进程</p></li></ul><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>如果没有子进程：</p><ul><li>returns –1</li><li>sets errno to ECHILD</li></ul><p>如果被信号打断：</p><ul><li>returns –1 </li><li>sets errno to EINTR</li></ul><h3 id="unsigned-int-sleep-unsigned-int-secs"><a href="#unsigned-int-sleep-unsigned-int-secs" class="headerlink" title="unsigned int sleep(unsigned int secs);"></a>unsigned int sleep(unsigned int secs);</h3><ul><li>如果 <code>sleep</code> 函数成功地睡眠了整个指定时间，则返回 0。</li><li>如果 <code>sleep</code> 函数因为接收到信号而提前被唤醒，则返回剩余未睡眠的秒数。</li></ul><h3 id="int-pause-void"><a href="#int-pause-void" class="headerlink" title="int pause(void);"></a>int pause(void);</h3><ul><li>总是返回-1</li><li>使调用进程挂起，直到接收到一个信号。</li></ul><h3 id="int-execve-const-char-filename-const-char-argv-const-char-envp"><a href="#int-execve-const-char-filename-const-char-argv-const-char-envp" class="headerlink" title="int execve(const char filename, const char argv[],            const char *envp[]);"></a>int execve(const char <em>filename, const char </em>argv[],            const char *envp[]);</h3><ul><li>如果 <code>execve</code> 执行成功，它不会返回，因为调用进程的映像已被新程序替换。</li><li>如果有错误发生，比如指定的文件不存在或没有执行权限等，它将返回 -1 并设置相应的 <code>errno</code>。</li><li><code>filename</code>：要执行的程序的路径。</li><li><code>argv</code>：传递给新程序的参数列表，是一个字符串数组。<code>argv[0]</code> 通常是程序的名称，数组以 <code>NULL</code> 结尾。</li><li><code>envp</code>：提供给新程序的环境变量，也是一个以 <code>NULL</code> 结尾的字符串数组。</li></ul><h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><h3 id="pid-t-getpgrp-void"><a href="#pid-t-getpgrp-void" class="headerlink" title="pid_t getpgrp(void);"></a>pid_t getpgrp(void);</h3><ul><li><code>getpgrp</code> 返回调用进程的进程组ID。在 UNIX 系统中，进程组ID通常是一个非负整数。</li><li>如果有错误发生，它将返回 -1，并设置相应的 <code>errno</code>。</li></ul><h3 id="pid-t-setpgid-pid-t-pid-pid-t-pgid"><a href="#pid-t-setpgid-pid-t-pid-pid-t-pgid" class="headerlink" title="pid_t setpgid(pid_t pid, pid_t pgid);"></a>pid_t setpgid(pid_t pid, pid_t pgid);</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>pid</code>：指定要更改其进程组的进程的进程 ID。如果 <code>pid</code> 为 0，则表示当前进程。</li><li><code>pgid</code>：新的进程组 ID。如果 <code>pgid</code> 为 0，则由 <code>pid</code> 指定的进程 ID 会被用作新的进程组 ID。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>成功时，<code>setpgid</code> 返回 0。</li><li>如果出现错误（例如，指定的 PID 不存在，或者违反了进程组设置的规则），则返回 -1，并设置相应的 <code>errno</code>。</li></ul><h3 id="int-kill-pid-t-pid-int-sig"><a href="#int-kill-pid-t-pid-int-sig" class="headerlink" title="int kill(pid_t pid, int sig);"></a>int kill(pid_t pid, int sig);</h3><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li><code>pid</code>：指定目标进程或进程组的进程 ID。<ul><li>如果 <code>pid</code> &gt; 0，信号被发送给指定的进程。</li><li>如果 <code>pid</code> = 0，信号被发送给与发送进程相同进程组的所有进程。</li><li>如果 <code>pid</code> &lt; -1，信号被发送给 <code>pid</code> 的绝对值所指定的进程组。</li><li>如果 <code>pid</code> = -1，信号被发送给发送进程有权限发送信号的所有进程。</li></ul></li><li><code>sig</code>：要发送的信号。可以是如 <code>SIGKILL</code>、<code>SIGTERM</code>、<code>SIGSTOP</code> 等各种信号。</li></ul><h3 id="unsigned-int-alarm-unsigned-int-secs"><a href="#unsigned-int-alarm-unsigned-int-secs" class="headerlink" title="unsigned int alarm(unsigned int secs);"></a>unsigned int alarm(unsigned int secs);</h3><p>调用 <code>alarm</code> 函数会设置一个定时器，当定时器计时到 <code>secs</code> 指定的秒数时，会向进程发送 <code>SIGALRM</code> 信号。</p><ul><li>参数：如果 <code>secs</code> 为 0，则取消任何之前设置的定时器</li><li>返回值：<code>alarm</code> 函数返回之前设置的定时器的剩余时间（秒）。如果之前没有设置定时器，则返回 0。</li></ul><h3 id="Receive-signal"><a href="#Receive-signal" class="headerlink" title="Receive signal"></a>Receive signal</h3><ul><li>SIGSTOP和SIGKILL不能被重定义</li></ul><h3 id="handler-t-signal-int-signum-handler-t-handler"><a href="#handler-t-signal-int-signum-handler-t-handler" class="headerlink" title="handler_t signal(int signum, handler_t handler)"></a>handler_t <em>signal(int signum, handler_t </em>handler)</h3><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p><code>handler</code> 可以是用户定义的函数，或者是两个特殊值之一：</p><ul><li><code>SIG_IGN</code>：忽略指定的信号。</li><li><code>SIG_DFL</code>：为指定的信号恢复默认行为。</li></ul><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>返回之前设置的信号处理器的地址。如果出现错误，则返回 <code>SIG_ERR</code>。</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20240107195617827.png" alt="image-20240107195617827"></p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="int-open-char-filename-int-flags-mode-t-mode"><a href="#int-open-char-filename-int-flags-mode-t-mode" class="headerlink" title="int open(char *filename, int flags, mode_t mode);"></a>int open(char *filename, int flags, mode_t mode);</h3><h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><ul><li><code>filename</code>: 指向要打开或创建的文件的路径的指针。</li><li><code>flags</code>: 指定文件的打开模式，例如只读 (<code>O_RDONLY</code>)、只写 (<code>O_WRONLY</code>) 或者读写 (<code>O_RDWR</code>)。此外，还有一些控制标志，如 <code>O_CREAT</code>（如果文件不存在，则创建它）、<code>O_EXCL</code>（与 <code>O_CREAT</code> 一起使用时，如果文件已存在，则会导致打开文件失败）等。</li></ul><h3 id="ssize-t-read-int-fd-void-buf-size-t-count"><a href="#ssize-t-read-int-fd-void-buf-size-t-count" class="headerlink" title="ssize_t read(int fd, void *buf, size_t count);"></a>ssize_t read(int fd, void *buf, size_t count);</h3><h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><ul><li><code>fd</code>: 文件描述符，它是由之前的 <code>open</code> 调用返回的，用于指定从哪个文件读取。</li><li><code>buf</code>: 指向一个缓冲区的指针，这个缓冲区用于存放从文件中读取的数据。</li><li><code>count</code>: 指定要读取的字节数。</li></ul><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><ul><li>成功时，返回读取的字节数。这个值可能小于请求的 <code>count</code>，这通常发生在文件末尾或者在遇到错误时。</li><li>如果到达文件末尾，则返回 <code>0</code>。</li><li>失败时，返回 <code>-1</code> 并设置 <code>errno</code> 来指示错误原因，例如 <code>EBADF</code>（无效的文件描述符）、<code>EIO</code>（I/O 错误）等。</li></ul><h3 id="ssize-t-write-int-fd-const-void-buf-size-t-count"><a href="#ssize-t-write-int-fd-const-void-buf-size-t-count" class="headerlink" title="ssize_t write(int fd, const void *buf, size_t count);"></a>ssize_t write(int fd, const void *buf, size_t count);</h3><h4 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h4><ul><li><code>fd</code>: 文件描述符，它是由之前的 <code>open</code> 调用返回的，用于指定向哪个文件写入。</li><li><code>buf</code>: 指向要写入数据的缓冲区的指针。</li><li><code>count</code>: 指定要写入的字节数。</li></ul><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><ul><li>成功时，返回写入的字节数。这个值可能小于请求的 <code>count</code>，尤其是在某些类型的文件（如非阻塞文件）或者在磁盘空间不足时。</li><li>失败时，返回 <code>-1</code> 并设置 <code>errno</code> 来指示错误原因，例如 <code>EBADF</code>（无效的文件描述符）、<code>EIO</code>（I/O 错误）等。</li></ul><h3 id="int-dup2-int-oldfd-int-newfd"><a href="#int-dup2-int-oldfd-int-newfd" class="headerlink" title="int dup2(int oldfd, int newfd);"></a>int dup2(int oldfd, int newfd);</h3><p>将newfd指向oldfd所指向的地方</p><h4 id="参数-6"><a href="#参数-6" class="headerlink" title="参数:"></a><strong>参数</strong>:</h4><ul><li><code>oldfd</code>: 已打开的文件描述符，它指向一个已经打开的文件或其他文件类型的资源（如管道、套接字等）。</li><li><code>newfd</code>: 指定要复制到的新文件描述符的值。如果 <code>newfd</code> 已经打开，则 <code>dup2</code> 会先关闭 <code>newfd</code>，然后再进行复制操作。</li></ul><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值:"></a><strong>返回值</strong>:</h4><ul><li>成功时，返回新的文件描述符（即 <code>newfd</code> 的值）。</li><li>失败时，返回 <code>-1</code> 并设置 <code>errno</code> 来指示错误原因，例如 <code>EBADF</code>（无效的文件描述符）、<code>EMFILE</code>（已达到进程可打开的最大文件描述符数）等。</li></ul><h3 id="int-dup-int-oldfd"><a href="#int-dup-int-oldfd" class="headerlink" title="int dup(int oldfd)"></a>int dup(int oldfd)</h3><h4 id="参数-7"><a href="#参数-7" class="headerlink" title="参数:"></a><strong>参数</strong>:</h4><ul><li><code>oldfd</code>: 要复制的文件描述符，它应该是一个打开的文件描述符。</li></ul><h4 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值:"></a><strong>返回值</strong>:</h4><ul><li>成功时，返回新的文件描述符。这个新描述符会有同样的文件表项但是有自己独立的文件描述符表项。</li><li>失败时，返回 <code>-1</code> 并设置 <code>errno</code> 来指示错误原因，例如 <code>EBADF</code>（<code>oldfd</code> 不是有效的文件描述符）、<code>EMFILE</code>（打开文件描述符的数量已达到进程的限制）等。</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><code>dup</code> 生成的新文件描述符总是取用进程可用的最小数值。</li><li>新的文件描述符与原始文件描述符共享相同的文件位置和文件状态标志；即，如果改变其中一个文件描述符的文件位置，则另一个也会改变。</li></ul><h3 id="int-fileno-FILE-stream"><a href="#int-fileno-FILE-stream" class="headerlink" title="int fileno(FILE *stream);"></a>int fileno(FILE *stream);</h3><ul><li><code>0</code>: 标准输入（<code>stdin</code>）。</li><li><code>1</code>: 标准输出（<code>stdout</code>）。</li><li><code>2</code>: 标准错误（<code>stderr</code>）。</li></ul><h2 id="Nonlocal-Jumps"><a href="#Nonlocal-Jumps" class="headerlink" title="Nonlocal Jumps"></a>Nonlocal Jumps</h2><h3 id="int-setjmp-jmp-buf-env"><a href="#int-setjmp-jmp-buf-env" class="headerlink" title="int setjmp(jmp_buf env);"></a>int setjmp(jmp_buf env);</h3><h4 id="参数-8"><a href="#参数-8" class="headerlink" title="参数:"></a><strong>参数</strong>:</h4><ul><li><code>env</code>: 类型为 <code>jmp_buf</code> 的数组，用于存储当前环境（包括程序计数器、堆栈指针等）以供 <code>longjmp</code> 使用。</li></ul><h4 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值:"></a><strong>返回值</strong>:</h4><ul><li>当直接从 <code>setjmp</code> 返回时，它返回 <code>0</code>。</li><li>当从 <code>longjmp</code> 调用返回时，它返回一个非零值，该值由 <code>longjmp</code> 的第二个参数指定。</li></ul><h3 id="void-longjmp-jmp-buf-env-int-retval"><a href="#void-longjmp-jmp-buf-env-int-retval" class="headerlink" title="void longjmp(jmp_buf env, int retval);"></a>void longjmp(jmp_buf env, int retval);</h3><h4 id="参数-9"><a href="#参数-9" class="headerlink" title="参数:"></a><strong>参数</strong>:</h4><ul><li><code>env</code>: 通过 <code>setjmp</code> 函数保存的环境。<code>env</code> 包含了调用 <code>setjmp</code> 时的栈帧、程序计数器和其他必要的处理器状态，使得程序可以恢复到 <code>setjmp</code> 被调用时的状态。</li><li><code>retval</code>: 这个值将被 <code>setjmp</code> 返回。重要的是，这个值不能是零，因为 <code>setjmp</code> 在正常执行时返回零。</li></ul><h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><h3 id="The-turnaround-time"><a href="#The-turnaround-time" class="headerlink" title="The turnaround time"></a>The turnaround time</h3><p>turnaround time 就是结束时间-到达时间</p><h3 id="Response-time"><a href="#Response-time" class="headerlink" title="Response time"></a>Response time</h3><p>从作业到达系统到第一次安排作业的时间</p><h3 id="First-In-First-Out-FIFO"><a href="#First-In-First-Out-FIFO" class="headerlink" title="First In, First Out (FIFO)"></a>First In, First Out (FIFO)</h3><h3 id="Shortest-Job-First-SJF"><a href="#Shortest-Job-First-SJF" class="headerlink" title="Shortest Job First (SJF)"></a>Shortest Job First (SJF)</h3><h3 id="Shortest-Time-to-Completion-First-STCF"><a href="#Shortest-Time-to-Completion-First-STCF" class="headerlink" title="Shortest Time-to-Completion First (STCF)"></a>Shortest Time-to-Completion First (STCF)</h3><p>每当新作业进入系统时，STCF调度程序会确定剩余作业（包括新作业）中剩余时间最少的一个，并对该作业进行调度</p><h3 id="Round-Rabin"><a href="#Round-Rabin" class="headerlink" title="Round Rabin"></a>Round Rabin</h3><p>在时间段内运行作业</p><p>切换到运行队列中的下一个作业</p><p>重复此操作，直到作业完成</p><h3 id="MLFQ"><a href="#MLFQ" class="headerlink" title="MLFQ"></a>MLFQ</h3><p>许多不同的队列</p><p>每个都分配了不同的优先级</p><p>准备运行的作业位于单个队列上</p><p>规则1：如果优先级（A）&gt;优先级（B），则A运行（B不运行）</p><p>规则2：如果优先级（A）=优先级（B），则A&amp;B在RR中运行</p><p>规则3：当作业进入系统时，它被置于最高优先级</p><p>规则4a：如果作业在运行时占用了整个时间片，则其优先级会降低</p><p>规则4b：如果一个作业在时间片结束前放弃了CPU，它将保持在相同的优先级</p><p>规则4（细化）：一旦一个作业在给定级别上用完了它的时间分配（无论它放弃了多少次CPU），它的优先级就会降低</p><p>规则5：经过一段时间S后，将系统中的所有作业移动到最上面的队列</p><h2 id="Floating-Point"><a href="#Floating-Point" class="headerlink" title="Floating Point"></a>Floating Point</h2><h3 id="Numeric-form"><a href="#Numeric-form" class="headerlink" title="Numeric form"></a><strong>Numeric form</strong></h3><script type="math/tex; mode=display">V=(-1)^S \times M \times 2^E</script><ul><li>符号位s决定数字是负数还是正数</li><li>显著M通常是范围[1.0,2.0）内的一个分数值。</li><li>指数E按二次幂对值进行加权</li></ul><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20240107205125047.png" alt="image-20240107205125047"></p><h3 id="Normalize-Values"><a href="#Normalize-Values" class="headerlink" title="Normalize Values"></a>Normalize Values</h3><p>此时$exp \ne 000 \cdots 0$ 并且$exp \ne 111 \cdots 1$</p><p>E = Exp - Bias</p><ul><li><p>Exp：用Exp表示的无符号值</p></li><li><p>Bias：偏移值</p><p>单精度：127（Exp:1…254，E:-126…127）</p><p>双精度：1023（Exp:1…2046，E:-1022…1023）</p><p>一般情况下：$Bias=2^{m-1}-1$，其中m是指数位数</p></li></ul><p>$m=1.xxxx \cdots x_2$</p><ul><li>$xxx \cdots x$：是frac</li><li>取最小值时 是000…0（M=1.0)</li><li>取最大值时 是111…1 (M趋近于2)</li></ul><h3 id="Denormalized-Values"><a href="#Denormalized-Values" class="headerlink" title="Denormalized Values"></a>Denormalized Values</h3><h4 id="exp小"><a href="#exp小" class="headerlink" title="exp小"></a>exp小</h4><p><strong>$exp = 000 \cdots 0$</strong> </p><p>E=1-Bias</p><p>$m=0.xxxx \cdots x_2$</p><ul><li>$xxx \cdots x$：是frac</li></ul><h4 id="exp大"><a href="#exp大" class="headerlink" title="exp大"></a>exp大</h4><p><strong>$exp = 111 \cdots 1$</strong> </p><p>$exp = 111…1, frac = 000…0$时表示无穷大</p><p>$exp = 111…1, frac \ne 000…0$时表示Not-a-Number</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20240107211300086.png" alt="image-20240107211300086"></p><h3 id="Rounding-Binary-Number"><a href="#Rounding-Binary-Number" class="headerlink" title="Rounding Binary Number"></a>Rounding Binary Number</h3><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20240107211535127.png" alt="image-20240107211535127"></p><h2 id="FP-Multiplication"><a href="#FP-Multiplication" class="headerlink" title="FP Multiplication"></a>FP Multiplication</h2><p>Sign s :         s1 ^ s2</p><p>Significand M :     M1 * M2</p><p>Exponent E :         E1 + E2</p><p>如果M≥2，向右移动M，增加E</p><p>舍入M以适应精度，必要时增加E</p><p>如果E超出范围，则溢出</p><h3 id="FP-Addition"><a href="#FP-Addition" class="headerlink" title="FP Addition"></a>FP Addition</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>23-24Fall 总结</title>
      <link href="/2024/01/18/23-24fall-zong-jie/"/>
      <url>/2024/01/18/23-24fall-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-2024-Fall-总结"><a href="#2023-2024-Fall-总结" class="headerlink" title="2023-2024 Fall 总结"></a>2023-2024 Fall 总结</h1><p>在漫长的疫情之后，我很快迎来了自己的第二个学年。秋学期的度过显得瞬间而匆忙，看似浮光掠影，但是也收获满满。</p><h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><p>浅浅翻了一下过去的两个学期的总结，第一个部分都是学习，确实在整个大一的过程中学习都是我的“主线任务”，但是这学期可能是一个例外，因为自己好像在大二上的“线索”是爱情。</p><p>从学期开始，自己早整整一个星期到校，为了能够与小韩老师争取多相处一段时间却悲催的发现小韩老师并不会早来，只好在图书馆耗费时间，每个晚上和pck wxc一起探讨军情；前两个星期一直为了和小韩老师多一点接触，屡次邀请一起出去玩，但是通通被拒，最后心如死灰，甚至在第一星期的周末临时选择回家。</p><p>接下来自己的心境似乎变得许多，意识到爱情并非争取即可得到。但是看似是如此，心里仍然无法放弃希望，而希望的彻底破灭，是小韩老师在那个周末请我出来喝咖啡，在3个小时的聊天之后提出了我们并不适合。至此，全剧终。我认为。</p><p>如果剧集就在这时候结束了，显然不可以说自己的这学期是由爱情贯穿的。在国庆之后，爱情迎来了“惊天大逆转”，最后也是和靖宝成功的走进了恋爱。在接近100天的相处里，我越发感受到自己的选择是非常明智的，一起自习，一起吃饭，也有过一些些小矛盾，但是我们都相对合理地解决……和靖宝的相处是愉快而幸福的，也是靖宝支撑着我度过了学期后期比较艰苦的时光。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>在刚入学的时候就听优秀的张卫鸣学长跟我讲，大二上的学习是比较轻松愉快的，结果显然。因为只有一个半早八嘿嘿（yxdzwmxzyyds</p><p>但是或许所谓的“轻松愉快”也只限于前几个星期，后来的半学期忙的也是不可开交。</p><p>正好成绩已经差不多全部出来，不妨以此为契机进行一下战果总结。本学期满绩门数只有8.5学分，相比前两学期都有所下降（该死的离散数学卡我94.4绩点），核心课程除了思修和体育课之外都上了90分，最后的核心学积分大概在93.5左右，但排名仍然是在10/92浮动。下面对每门课程进行小小的点评以及自己在学习课程中的感受。</p><h3 id="软件基础实践-SEP"><a href="#软件基础实践-SEP" class="headerlink" title="软件基础实践(SEP)"></a>软件基础实践(SEP)</h3><p>这门课其实从大一下学期就开始开设，课程由杜东东老师主讲，但是讲解的内容几乎没什么人听，因为要不然是太过于晦涩，要不然就是非常简单的自学内容。</p><p>个人认为这门课最重要的部分是在于它的lab和project。从lab1的痛彻骨髓到后来逐渐变得轻松，再到暑假写qlink时自学Qt，第一次接触个人大项目，还有在较短时间内完成QBasic……相对其他课程比较大的workload带来了这门课程更多的收获，对我的码力有了极大的促进作用。值得一提的是，在QBasic答辩的时候，我发现自己少实现了一个功能qaq，于是多了一门上机考，在一个小时内极限实现，最后也得到了不错的分数。</p><h3 id="大学物理（荣誉）（2）"><a href="#大学物理（荣誉）（2）" class="headerlink" title="大学物理（荣誉）（2）"></a>大学物理（荣誉）（2）</h3><p>袁神万岁！！！</p><p>这学期的课程我终于有机会去选择袁晓忠老师，但是感受更加明显的是袁晓忠老师的课程难度以及作业难度是相对于之前的陈洁老师更大的，每次听完课都觉得自己好像懂了，但是做这部分的作业却是一种要扒一层皮的感觉，好在扒完皮之后也可以对知识有更好的理解。</p><p>这门课也没什么好说的了，因为袁晓忠老师的教学能力是公认的牛:cow:</p><h3 id="基础物理实验（荣誉）（2）"><a href="#基础物理实验（荣誉）（2）" class="headerlink" title="基础物理实验（荣誉）（2）"></a>基础物理实验（荣誉）（2）</h3><p>只有一学分的小课，目标是完成6个实验，因为荣誉课的亲民考虑只需写三次实验报告，但是都是比较困难的实验内容。</p><p>只提一句，如果想实验报告得高分，可以多玩玩花活，比如说写写代码附在后面，会有意想不到的效果哦</p><h3 id="离散数学（荣誉）"><a href="#离散数学（荣誉）" class="headerlink" title="离散数学（荣誉）"></a>离散数学（荣誉）</h3><p>这门课可以说是考试过后有点生气的课程了。由于是荣誉课程，所以比面上的学生学更多的东西，这里要点名抽象代数，真的是课如其名，学不懂一点，再加上考的更加的基础，基本是ppt上的证明原题的改编，但是证明原题我也记不住啊:sob:</p><p>龙宇老师人很好，作业只要提交就可以拿满分，平时作业很少很轻松（但是这也导致我什么都不会只好期末抱佛脚），最后给分也还行，但是卡我94.4的绩点实在是让人想不通了。</p><h3 id="概率统计（荣誉）"><a href="#概率统计（荣誉）" class="headerlink" title="概率统计（荣誉）"></a>概率统计（荣誉）</h3><p>这是我考的第一门课，也是我骂的最多的一门课。</p><p>全程老师讲的很急促，但是许多知识点也没有顾及，最后荣誉课的考试也比面上的同学要难许多许多，平时分也没有给满，真是令人心碎。</p><p>总的课程难度其实不大，但是给的作业压力还是挺多的。</p><h3 id="爱的艺术与人生"><a href="#爱的艺术与人生" class="headerlink" title="爱的艺术与人生"></a>爱的艺术与人生</h3><p>强推课程！！！</p><p>陈玲玲老师人很好！作业也不是很多，每节课只要求到就行，并且最后给分也不戳。其实通识课也就是学一个心情，很开心和自己的小组成员一起拍了一个小电影，速速上链接：<a href="https://www.bilibili.com/video/BV1Pw411H7HU/?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Pw411H7HU/?spm_id_from=333.999.0.0</a></p><p>作为第一门通识课，拿到了90分，也算是很不错啦~</p><h3 id="思想道德与法治"><a href="#思想道德与法治" class="headerlink" title="思想道德与法治"></a>思想道德与法治</h3><p>不想多说的课程，但是对于史洪波老师的评价一开始是有点极端的，但是看到成绩后觉得这个老师其实也还行，如果你是那种愿意每节课出席来换取一个比较高的平时分的话，强推！</p><p>最后背书是真的痛苦啊:cry:</p><h3 id="力学基础（荣誉）"><a href="#力学基础（荣誉）" class="headerlink" title="力学基础（荣誉）"></a>力学基础（荣誉）</h3><p>也是一门心情比较复杂的课程，学的东西其实很少，因为我一学期没听课最后一晚上也算是小小的速成了（这是可以说的嘛），跟继泽、彭娜、姜姜一起组队参加了结构赛，一整个星期没日没夜地往船院跑，最后虽然只拿了个三等奖，但是非常有意义的经历！</p><p>最后虽然只有85分，虽然这节课学的很没用，但是还是要感谢这门课，感谢陈思佳老师和蔡遥助教，因为实践课给我一些很不一样的体验，总之很开心！！！</p><h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>这学期自己玩的更多啦~从学期初看了伍佰老师的演唱会，到学期中旬和果果哥哥and靖靖姐姐一起去欢乐谷玩，再到学期结束的蒲公英安徽之旅，自己学会了在大学时光进行放松，也收获了不错的效果（指没有秃头:face_with_head_bandage:)</p><p>很开心可以交到更多的朋友，更亲密的伙伴，也相信生活是快乐的事情，更多有意思的事情正等着我们一起去探索！</p><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>time flies！想想自己的大学生活已经要过半了，这个寒假自己也要多为下学期的魔鬼课程做一些准备，比如……先把繁花看完（bushi）</p><p>说认真的，根据学长的建议，想要先自学一下高级数据结构和web开发，希望寒假过后自己可以收获满满！！！</p><p>勇敢笑笑，不怕困难！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>愁</title>
      <link href="/2023/12/06/chou-xu/"/>
      <url>/2023/12/06/chou-xu/</url>
      
        <content type="html"><![CDATA[<p>不知为什么，或许是最近有点太忙了，总是有一种突然的愁绪涌上心头，是毫无预兆的，突如其来的，但是极为悲伤的，穿透骨髓的，能让眼泪在一瞬间涌出眼眶的那种。</p><p>有时会突然觉得父母越来越老了，但是自己却没有太多的时间去陪伴，在外地上学时，每天花着父母的积蓄，但是却不能为他们做些什么，这样说或许是有点客套的，但也确实是心里所想。</p><p>有时候会很想陪陪他们，却不知道如何开口，会很想让他们多休息休息，保重身体，却想到自己不在他们身边，很多事情都只能是停留在口头，就觉得很难受很难受。</p><p>去医院看手时，看到排队在前面的阿姨患了癌症，看到大厅里很多没有病房只是蜷缩在病床上的病人，他们衰老，虚弱，这时就会想到自己的父母或许也有这天，心中就感到万般愁绪，甚至是无助。</p><p>人生的最终课题就是学会如何直面死亡，是的，但是我觉得我很难做到，我甚至无法直面父母的衰老，何况是永久的离开。每当想到如此，就觉得在父母衰老的路程中自己却不在身边，等到那个时刻，自己会不会感到非常的遗憾与后悔，没有给予更多的陪伴。但是自己又能够做什么呢，我无法回去每时每刻陪伴在他们的身旁，好像……我真的什么都做不了。</p><p>这时就有一种深深的无力感，就好像正反馈调节一样，越想越感到深深的不安。</p><p>常常想起小时候的点点滴滴，自己也会突然的情绪崩溃，觉得自己学习还不够努力，不配父母给予我的一切，现在好像已经看透了学习，但是却失去了永久的陪伴在父母身边的权利。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大二上中期总结</title>
      <link href="/2023/11/16/da-er-shang-zhong-qi-zong-jie/"/>
      <url>/2023/11/16/da-er-shang-zhong-qi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="大二上中期总结"><a href="#大二上中期总结" class="headerlink" title="大二上中期总结"></a>大二上中期总结</h1><p>可能是发现最近的自己太过于盲目的忙碌，同时也有一种浮躁的情绪一直笼罩在心中，一直有一种深深的不安。今晚，zzc学长约我周日咖啡聊一下最近的学习状况（原因是概统的小测完成的太差），成为了压倒我的最后一根稻草qaq，故决定在繁重的ddl前好好进行一次中期的总结反思。</p><p>不妨就以一门一门课的反思与期望为内容。</p><h3 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h3><p>这门课之前自己听课还算认真，作业也大都可以应付，但是很多内容都是过眼云烟，转瞬就忘记，可以在适当时期进行归纳总结。后期的话，可以延续这种状态，并且在期末考试前进行总结和复习，应该问题不是很大。</p><h3 id="力学基础"><a href="#力学基础" class="headerlink" title="力学基础"></a>力学基础</h3><p>用两个字来形容前半学期对这门课的态度就是纯纯摆烂，但是说实话也觉得这样做无可厚非，因为不算核心学积分，所讲的内容和自己的专业也没什么太大的关系。后期的话，可以稍微提升一点听课的效率，少在课上做一些浪费时间的事情。争取在课上多进行一点学习，课外作业尽量可以多一点自己的思考。</p><h3 id="大学物理"><a href="#大学物理" class="headerlink" title="大学物理"></a>大学物理</h3><p>感觉自己在上面没有耗费太多的时间，但是效果就是对公式很不熟练。yxz的期末考试是没有cheating paper的！！！做总结不是把知识点抄在笔记本上，而是自己多花时间看，把公式记熟一点并且可以熟练运用！！！</p><p>后半学期一定要多进行一些知识点的回顾，闲下来的时候可以看看知识点，上课的时候也要多集中注意力！！！作业要理解透彻了。</p><h3 id="计算机系统基础"><a href="#计算机系统基础" class="headerlink" title="计算机系统基础"></a>计算机系统基础</h3><p>学期初对这门课很懈怠，但是小测前有点亡羊补牢的味道，对知识的掌握也不至于没有一点。后期一定要提高课堂的效率。对于作业和lab，可以适当在网上找一些解题的技巧，而不用花太多的时间在无趣的纠结之中。</p><h3 id="概率统计"><a href="#概率统计" class="headerlink" title="概率统计"></a>概率统计</h3><p>很迷茫的一堂课……一方面认为讲的自己都懂，但是小测测出来结果很不如意，可以等一个周末挤出时间将之前讲的所有知识点全部复习一遍，做一个小小的整理，对于每次作业不能粗枝大叶，要更用心一点，不能大而化之。把会做的题目做对，一些适当的套路要更加熟练</p><h3 id="软件基础实践"><a href="#软件基础实践" class="headerlink" title="软件基础实践"></a>软件基础实践</h3><p>lab要多做，多上心，毕竟算是之后的专业素养和核心竞争力。</p><h2 id="努力的点"><a href="#努力的点" class="headerlink" title="努力的点"></a>努力的点</h2><ul><li>上课将手机飞行，好好听课，少刷水源。</li><li>多用时间来自习，懒觉适当睡，熬夜也要适当。自习的时候不要一心二意听歌，把作业好好做也是一门学问。</li><li>提高对一些课的重视程度，多回顾回顾。</li></ul><p>暂时就想到这么多，庆幸这学期还没有结束，还有很多可以努力的空间。但是，在忙于学习的同时，也要学会调节自己的情绪，不要给人一种怨气很重的感觉，做一个性格情绪更加稳定的人。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>22-23Spring 总结</title>
      <link href="/2023/07/06/22-23spring-zong-jie/"/>
      <url>/2023/07/06/22-23spring-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="22-23Spring-总结"><a href="#22-23Spring-总结" class="headerlink" title="22-23Spring 总结"></a>22-23Spring 总结</h1><p>在疫情放开后，我迎来了第一个真正意义上恢复正常的大学学期，但伴随而来的也有远超上学期的挑战，很庆幸自己能够相对完整且快乐地度过大学中的第一道坎。</p><h2 id="痛感"><a href="#痛感" class="headerlink" title="痛感"></a>痛感</h2><p>虽然上学期的自己对大学的学习、生活逐渐形成了自己的一套体系，但是这学期初时还是有些吃力与痛苦。</p><p>印象最深刻的就是软院的附加课程“软件基础实践”，这门课至今还能让人瑟瑟发抖。在写lab1时，由于是第一次写比较大的任务，同时也有很多的内容（如STL等）是上学期的C++课程没有讲的，这就纯纯靠自己一点点摸索。依然记得那是第二周的周末，在好不容易写完所有的代码并且可以跑通样例后，我惊讶的发现提交后只能得0分，甚至连编译都无法完成。（后来证明我确实有一个地方的代码出了小问题，导致越界）在看了代码许多遍之后，我仍然无法找出任何问题，遂去找助教，但没立即回复。第二周的周五是极为痛苦的，没有任何的希望可追求，我甚至在怀疑自己是否选错了专业，是否并不适合代码……庆幸地是，第二天助教给我发了信息，原来是虚拟机出了问题，那份作业得了满分。后来的三个lab难度没有什么太大的变化，但是由于自己一点点地学会并且适应了“自学”，所以相对来说痛感减少了很多。</p><p>痛感也存在于各种考试的不如意中。从13周“数字电子技术”由于对英文的理解导致出错，到数分期中期末的铩羽而归，下学期的考试成绩并不如上学期两门硬课一样顺风顺水。一次次考试成绩的崩盘让人心碎，但这也还不是最痛苦的。因为对往年题目有了全面的研究，我甚至可以预知今年的题目会怎么排布，因此每次考试前一晚都会在宿舍里押题，而且每次竟然都奇准无比。但是……第二天自己却会由于各种错误分数扣得一塌糊涂。</p><p>垃圾培养计划给予的各种不合理课程也给予了我不少的痛苦与挑战。这里要点名一门课程——交大金课<strong>电路实验</strong>,这门课真的是令人无语，花费大量的时间去做毫无作用的事情，每次夜晚的挑灯夜抄就很令人崩溃。关键是由于不合理的课程排布，许多内容在电路理论课中还没有学，就只能纯纯靠抄……意义何在？最后的考试也是纯纯逆天，幸好大家考到的都是比较简单的。<strong>电路理论</strong>课也是无语，由于荣誉课的原因，课程被压缩成了3学分，根本来不及讲……再加上老师的教学方式与我并不相和，就只能在b站上自己去学疫情期间的课程，还好最后结果挺好。</p><h2 id="课外"><a href="#课外" class="headerlink" title="课外"></a>课外</h2><p>很开心的是，这个学期自己参加了大量的课外活动。第二周周末和继泽一起去种菜，127校庆参加音乐节，还有精心准备的储才计划面试，各种活动、组织的面试，即使有许多的面试都被拒了，但是回想起来是一段锻炼的旅程，也算是大学期间不错的回忆~</p><p>最终储才计划因为遇到了一群**的队友而寄，也算是一段遗憾吧，但也非常值得自己去思考。由于大太阳学长的细心指导，我几乎在面试前彻底的了解了所有的面试流程与问题，再加上许多求解，几乎所有人都以为我稳了，结果……再与数分、数电那些考试相结合，自己好像所有的“提前准备”都会导致失败，而在面试蒲公英支教团时毫无准备，放轻松，纯靠“自身素养”，最终却取得了不错的结果。</p><p>这学期也探索了不少美食，可以晚上十点与lcl相约到永平路吃东北菜，听东北大爷吹牛，也可以在考试后与gr吃海宁煲，甚至可以在考试周拉上xr去吃牛new。我似乎已经吃遍了附近的美食。</p><p>在繁重的课业压力下，我似乎更懂得如何放松，如何劳逸结合，最终的结果相比之下也不戳~</p><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>总的来说，下学期的学积分还是不戳捏~13学分共4门课满绩，只有一门英语低于85分，绝大部分都在90分及以上，平均水平和上学期比也有了不错的进步，只是最终的排名好像和上学期大差不差。</p><p>自己对大一学年的成绩还是相对比较满意的，希望可以好好保持，那自己在大三的暑假会有更多的选择权，无论是出国还是保研，都有更多的方式可以达成自己的目标，开卷吧，少年！</p><p>相比之下，我更担心的还是自己的码力提升，已经买了csapp的书，但是还一点没读，Qt还在自学中，感觉并没有多少的结果，但是暑假还是要完成一个连连看的小游戏大作业……有点烦</p><p>不过相信自己一定可以有更多的潜能去发掘，只要努力，什么是不可能的呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>QT学习笔记 2023Summer</title>
      <link href="/2023/06/19/qt-bi-ji/"/>
      <url>/2023/06/19/qt-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="QT学习笔记"><a href="#QT学习笔记" class="headerlink" title="QT学习笔记"></a>QT学习笔记</h1><h2 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h2><h3 id="04-创建第一个QT程序"><a href="#04-创建第一个QT程序" class="headerlink" title="04 创建第一个QT程序"></a>04 创建第一个QT程序</h3><ul><li><p>QWidget是QMainWindow和QDialog的父类，其中QMainWindow多菜单栏，QDialog是一个对话框</p></li><li><p>.pro文件是“工程”文件</p></li><li><p>main.cpp初始文件解释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span><span class="comment">//包含一个应用程序类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main程序入口 argc是命令行变量的数量 argv是命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a是应用程序对象，在Qt中，应用程序对象有且只有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象 myWidget父类 -&gt;QWidget</span></span><br><span class="line">    myWidget w;</span><br><span class="line">    <span class="comment">//窗口对象 默认不会显示，必须要调用show方法显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">//让应用程序对象进入消息循环机制</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>.pro文件的解释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui <span class="comment">//Qt包含的模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets  <span class="comment">//大于4版本以上包含widget模块</span></span><br><span class="line"></span><br><span class="line">CONFIG += c++<span class="number">11</span></span><br><span class="line"></span><br><span class="line">DEFINES += QT_DEPRECATED_WARNINGS</span><br><span class="line"></span><br><span class="line">SOURCES += \      <span class="comment">//源文件</span></span><br><span class="line">    main.cpp \</span><br><span class="line">    mywidget.cpp</span><br><span class="line"></span><br><span class="line">HEADERS += \      <span class="comment">//头文件</span></span><br><span class="line">    mywidget.h</span><br><span class="line"></span><br><span class="line">qnx: target.path = /tmp/$$&#123;TARGET&#125;/bin</span><br><span class="line"><span class="keyword">else</span>: unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span><br><span class="line">!<span class="built_in">isEmpty</span>(target.path): INSTALLS += target</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="05命名规范以及快捷键"><a href="#05命名规范以及快捷键" class="headerlink" title="05命名规范以及快捷键"></a>05命名规范以及快捷键</h3><ul><li><p>myWidget.h文件的解释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span><span class="comment">//包含头文件 QWidget窗口类</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT<span class="comment">// Q_OBJECT宏，允许类中使用信号和槽机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">myWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);<span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">myWidget</span>();<span class="comment">//虚构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br><span class="line">命名规范及快捷键</span><br></pre></td></tr></table></figure></li><li><p>myWidget.cpp文件解释</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span><span class="comment">//按钮控件的头文件</span></span></span><br><span class="line"><span class="comment">//命名规范</span></span><br><span class="line"><span class="comment">//类名 首字母大写，单词与单词之间首字母大写</span></span><br><span class="line"><span class="comment">//函数名 变量名称 首字母小写，单词和单词之间首字母大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快捷键</span></span><br><span class="line"><span class="comment">//注释 ctrl+/</span></span><br><span class="line"><span class="comment">//运行 ctrl+r</span></span><br><span class="line"><span class="comment">//编译 ctrl+b</span></span><br><span class="line"><span class="comment">//字体缩放 ctrl+鼠标滚轮</span></span><br><span class="line"><span class="comment">//查找 ctrl+f</span></span><br><span class="line"><span class="comment">//整行移动 ctrl+shift+↑或者↓</span></span><br><span class="line"><span class="comment">//帮助文档 F1</span></span><br><span class="line"><span class="comment">//自动对齐 ctrl+i</span></span><br><span class="line"><span class="comment">//同名之间的.h和.cpp切换 F4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//帮助文档：</span></span><br><span class="line"><span class="comment">//第一种方式 F1</span></span><br><span class="line"><span class="comment">//第二种方式 左侧按钮</span></span><br><span class="line"><span class="comment">//第三种方式 D:\QT_installer\install_data\5.14.2\mingw73_64\bin</span></span><br><span class="line"></span><br><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建第一个按钮</span></span><br><span class="line">        QPushButton *btn=<span class="keyword">new</span> QPushButton;</span><br><span class="line">        <span class="comment">//让btn对象依赖在myWidget窗口中</span></span><br><span class="line">        btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//显示文本</span></span><br><span class="line">        btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;the first button&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建第二个按钮</span></span><br><span class="line">        QPushButton* btn2 =<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;the second button&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//移动btn2按钮</span></span><br><span class="line">        btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置窗口大小</span></span><br><span class="line">        <span class="built_in">resize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置固定的窗口大小</span></span><br><span class="line">        <span class="built_in">setFixedSize</span>(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口标题</span></span><br><span class="line">        <span class="built_in">setWindowTitle</span>(<span class="string">&quot;the firt window&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myWidget::~<span class="built_in">myWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="06QPushButton创建"><a href="#06QPushButton创建" class="headerlink" title="06QPushButton创建"></a>06QPushButton创建</h3><ul><li>创建QPushButton* btn=new QPushButton</li><li>设置父亲 setParent(this)</li><li>设置文本 setText(“文字”)</li><li>设置位置 move(宽，高)</li><li>重新指定窗口大小 resize</li><li>设置窗口标题 setWindowTitle</li><li>设置窗口固定大小 setFixSize</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮控件</span></span><br><span class="line">    QPushButton * btn=<span class="keyword">new</span> QPushButton;</span><br><span class="line">  <span class="comment">//  btn-&gt;show();//顶层方式显示</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果想显示时在当前窗口显示，需要设置父窗口</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置文本</span></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//创建第二个按钮</span></span><br><span class="line">     QPushButton * btn2 =<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;hello&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//按钮也可以重置尺寸</span></span><br><span class="line">     btn2-&gt;<span class="built_in">resize</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">     <span class="comment">//移动位置</span></span><br><span class="line">     btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//设置窗口尺寸</span></span><br><span class="line">    <span class="comment">// this-&gt;resize(100,200);</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">//设置固定窗口尺寸</span></span><br><span class="line">     <span class="keyword">this</span>-&gt;<span class="built_in">setFixedSize</span>(<span class="number">900</span>,<span class="number">400</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//设置窗口标题</span></span><br><span class="line">     <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;显示子女&quot;</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//自定义自己的按钮，捕获析构函数</span></span><br><span class="line">     MyPushButton *mybtn = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">     mybtn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line">     mybtn-&gt;<span class="built_in">move</span>(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">     mybtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;我的按钮&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="07对象树"><a href="#07对象树" class="headerlink" title="07对象树"></a>07对象树</h3><ul><li>当创建的对象在堆区的时候，如果指定的父亲是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，将对象会放入对象树中。</li><li>一定程度上简化了回收机制</li></ul><h3 id="08Qt中的坐标系"><a href="#08Qt中的坐标系" class="headerlink" title="08Qt中的坐标系"></a>08Qt中的坐标系</h3><ul><li>坐标体系：以左上角为原点，X轴向右增加，Y向下增加</li></ul><h3 id="09信号和槽-点击按钮关闭窗口"><a href="#09信号和槽-点击按钮关闭窗口" class="headerlink" title="09信号和槽-点击按钮关闭窗口"></a>09信号和槽-点击按钮关闭窗口</h3><ul><li><p>连接函数 connect</p></li><li><p>参数：</p><ul><li>参数1 信号的发送者 </li><li>参数2 发送的信号（函数的地址） </li><li>参数3 信号的接受者 </li><li>参数4 处理的槽函数</li></ul></li><li><p>松散耦合</p></li><li><p>实现点击按钮 关闭窗口的案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">//需求：点击我的按钮 关闭窗口</span></span><br><span class="line"><span class="comment">//参数1 信号的发送者 参数2 发送的信号（函数的地址） 参数3 信号的接受者 参数4 处理的槽函数</span></span><br><span class="line"><span class="built_in">connect</span>(myBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;myWidget::close);</span><br></pre></td></tr></table></figure></li></ul><h3 id="10自定义的信号和槽"><a href="#10自定义的信号和槽" class="headerlink" title="10自定义的信号和槽"></a>10自定义的信号和槽</h3><ul><li><p>自定义信号</p><ul><li><p>写到signals下</p></li><li><p>返回值是void</p></li><li>需要声明，不需要实现</li><li>可以有参数，可以重载</li></ul></li><li><p>自定义槽函数</p><ul><li><p>写到public slot下，或者public或者全局函数</p></li><li><p>返回值是void</p></li><li>需要声明，需要实现</li><li>可以有参数，可以重载</li></ul></li><li><p>触发自定义的信号</p><ul><li>emit 自定义的信号</li></ul></li><li><p>案例：下课后，老师出发饿了信号，学生响应信号，请客吃饭（见文件the_second_day_learning)</p></li></ul><h3 id="11-amp-12自定义的信号和槽发生重载的解决-amp-信号连接信号"><a href="#11-amp-12自定义的信号和槽发生重载的解决-amp-信号连接信号" class="headerlink" title="11&amp;12自定义的信号和槽发生重载的解决&amp;信号连接信号"></a>11&amp;12自定义的信号和槽发生重载的解决&amp;信号连接信号</h3><ul><li><p>需要利用函数指针，明确指向函数的地址</p></li><li><p>```<br>  void (Teacher::*teacherSignal)(QString)=&amp;Teacher::hungry;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ QString转成char*</span><br><span class="line">  + .ToUtf8()转为QByteArray</span><br><span class="line">  + .Data()转为char *</span><br><span class="line"></span><br><span class="line">+ 信号可以连接信号</span><br><span class="line"></span><br><span class="line">+ 断开信号：disconnect</span><br><span class="line"></span><br><span class="line">+ 拓展</span><br><span class="line"></span><br><span class="line">    + 1、信号是可以连接</span><br><span class="line">    + 2、一个信号可以连接多个槽函数</span><br><span class="line">    + 3、多个信号可以连接同一个槽函数</span><br><span class="line">    + 4、信号和槽函数的参数必须类型一一对应</span><br><span class="line">    + 5、信号和槽的参数个数不需要一致，信号的参数个数可以多于槽函数的参数个数</span><br><span class="line"></span><br><span class="line">### 13 Qt4版本信号槽连接</span><br><span class="line"></span><br><span class="line">+ connect（信号的发送者，发送的信号 SIGNAL(信号)，信号接受者，槽函数 SLOT(槽函数)）</span><br><span class="line">+ 优点 参数直观</span><br><span class="line">+ 缺点 编译器不会检测参数类型</span><br><span class="line"></span><br><span class="line">### 14 Lambda表达式</span><br><span class="line"></span><br><span class="line">+ []标识符 匿名函数</span><br><span class="line">  + =值传递</span><br><span class="line">  + &amp;引用传递</span><br><span class="line">+ （）参数</span><br><span class="line"></span><br><span class="line">+ &#123;&#125;实现体</span><br><span class="line">+ mutable 修饰值传递变量，可以修改拷贝出的数据，改变不了本体</span><br><span class="line">+ 返回值 [] ()-&gt;int&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## DAY2</span><br><span class="line"></span><br><span class="line">### 02 Qmainwindow_菜单栏和工具栏</span><br><span class="line"></span><br><span class="line">+ QMainWindow</span><br><span class="line"></span><br><span class="line">  + 菜单栏 最多有一个</span><br><span class="line"></span><br><span class="line">     ```c++</span><br><span class="line">          //菜单栏创建</span><br><span class="line">          //菜单栏只有一个</span><br><span class="line">          QMenuBar* bar=menuBar();</span><br><span class="line">          //将菜单栏放入窗口中</span><br><span class="line">          setMenuBar(bar);</span><br><span class="line">      </span><br><span class="line">          //创建菜单</span><br><span class="line">          //bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">          QMenu *fileMenu=bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">          QMenu *editMenu=bar-&gt;addMenu(&quot;编辑&quot;);</span><br><span class="line">      </span><br><span class="line">          //创建菜单项</span><br><span class="line">          //fileMenu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line">          QAction *newAction= fileMenu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line">      </span><br><span class="line">          //添加分隔符</span><br><span class="line">          fileMenu-&gt;addSeparator();</span><br><span class="line">          //fileMenu-&gt;addAction(&quot;打开&quot;);</span><br><span class="line">          QAction *openAction= fileMenu-&gt;addAction(&quot;打开&quot;);</span><br></pre></td></tr></table></figure><ul><li><p>工具栏 可以有多个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具栏 可以有多个</span></span><br><span class="line">   QToolBar* toolBar=<span class="keyword">new</span> <span class="built_in">QToolBar</span>(<span class="keyword">this</span>);</span><br><span class="line">   <span class="comment">//addToolBar(toolBar);</span></span><br><span class="line">   <span class="built_in">addToolBar</span>(Qt::BottomToolBarArea,toolBar);<span class="comment">//第一个内容参考帮助文档</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">//后期设置 只允许 左右停靠</span></span><br><span class="line">   toolBar-&gt;<span class="built_in">setAllowedAreas</span>(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//设置浮动</span></span><br><span class="line">   toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//设置移动（总开关）</span></span><br><span class="line">   toolBar-&gt;<span class="built_in">setMovable</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//工具栏中可以设置内容</span></span><br><span class="line">   toolBar-&gt;<span class="built_in">addAction</span>(newAction);</span><br><span class="line">   <span class="comment">//添加分割线</span></span><br><span class="line">   toolBar-&gt;<span class="built_in">addSeparator</span>();</span><br><span class="line">   toolBar-&gt;<span class="built_in">addAction</span>(openAction);</span><br><span class="line">   <span class="comment">//工具栏中添加控件</span></span><br><span class="line">   QPushButton *btn=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;aa&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">   toolBar-&gt;<span class="built_in">addWidget</span>(btn);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="03-QMainWindow-状态栏、铆接部件、核心部件"><a href="#03-QMainWindow-状态栏、铆接部件、核心部件" class="headerlink" title="03 QMainWindow_状态栏、铆接部件、核心部件"></a>03 QMainWindow_状态栏、铆接部件、核心部件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态栏 最多有一个</span></span><br><span class="line">QStatusBar* stBar=<span class="built_in">statusBar</span>();</span><br><span class="line"><span class="comment">//设置到窗口中</span></span><br><span class="line"><span class="built_in">setStatusBar</span>(stBar);</span><br><span class="line"><span class="comment">//放标签控件</span></span><br><span class="line">QLabel* label1=<span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;左侧提示信息&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;<span class="built_in">addWidget</span>(label1);</span><br><span class="line"></span><br><span class="line">QLabel* label2=<span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">&quot;右侧提示信息&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;<span class="built_in">addPermanentWidget</span>(label2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//铆接部件（浮动窗口） 可以有多个</span></span><br><span class="line">QDockWidget *dockWidget=<span class="keyword">new</span> <span class="built_in">QDockWidget</span>(<span class="string">&quot;浮动&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">addDockWidget</span>(Qt::BottomDockWidgetArea,dockWidget);</span><br><span class="line"><span class="comment">//设置后期停靠区域，只允许上下，只允许上下</span></span><br><span class="line">dockWidget-&gt;<span class="built_in">setAllowedAreas</span>(Qt::TopDockWidgetArea);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置中心部件 只能有一个</span></span><br><span class="line">QTextEdit* edit=<span class="keyword">new</span> <span class="built_in">QTextEdit</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">setCentralWidget</span>(edit);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="04-资源文件添加"><a href="#04-资源文件添加" class="headerlink" title="04 资源文件添加"></a>04 资源文件添加</h3><ul><li>将图片文件拷贝到项目文件下</li><li>创建 右键项目-&gt;添加新文件-&gt;Qt-&gt;Qt resource File -&gt;给资源文件起名字</li><li>res生成res.qrc</li><li>open in editor 编辑资源</li><li>添加前缀 添加文件</li><li>使用 “：+前缀名+文件名”</li></ul><h3 id="05-模态和非模态对话框创建"><a href="#05-模态和非模态对话框创建" class="headerlink" title="05 模态和非模态对话框创建"></a>05 模态和非模态对话框创建</h3><p>对话框分类</p><ul><li><p>模态对话框（不可以对其他窗口进行操作）</p></li><li><p>非模态对话框（可以对其他窗口进行操作）</p></li><li><p>```c++</p><pre><code>ui-&gt;setupUi(this);this-&gt;resize(1200,1400);//点击新建按钮 弹出一个对话框connect(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;    //对话框 分类    //模态对话框（不可以对其他窗口进行操作） 非模态对话框（可以对其他窗口进行操作）    //模态创建    QDialog dlg(this);    dlg.resize(800,1000);    dlg.exec();    qDebug()&lt;&lt;&quot;out&quot;&lt;&lt;endl;</code></pre></li></ul><pre><code>      //非模态创建      QDialog* dlg2=new QDialog(this);      dlg2-&gt;resize(800,600);      dlg2-&gt;show();      dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);//55号 属性      qDebug()&lt;&lt;&quot;out&quot;&lt;&lt;endl;  &#125;);</code></pre>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 06 消息对话框</span><br><span class="line"></span><br><span class="line">+ 标准对话框-消息对话框</span><br><span class="line">  + QMessageBox 静态成员函数 创建对话框</span><br><span class="line">  + 错误、信息、提问、警告</span><br><span class="line">  + 参数1 父亲  参数2 标题  参数3 显示内容  参数4 按键类型  参数5 默认关联回车</span><br><span class="line">  + 返回值也是StandardButton类型，利用返回值来判断用户的输入</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">connect(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class="line">            //QMessageBox 消息对话框</span><br><span class="line">            //错误提示 浮窗口 标题 文本</span><br><span class="line">            QMessageBox::critical(this,&quot;critical&quot;,&quot;错误!&quot;);</span><br><span class="line">            //信息提示</span><br><span class="line">            QMessageBox::information(this,&quot;info&quot;,&quot;信息提示&quot;);</span><br><span class="line">            //询问提示 参数1：父窗口 参数2：标题 参数3：中间显示文本 参数4：按键类型 参数5：关联回车按键</span><br><span class="line">            QMessageBox::question(this,&quot;question&quot;,&quot;提问&quot;,QMessageBox::Save | QMessageBox::Cancel,QMessageBox::Cancel);</span><br><span class="line">            if (QMessageBox::Save== QMessageBox::question(this,&quot;question&quot;,&quot;提问&quot;,QMessageBox::Save | QMessageBox::Cancel,QMessageBox::Cancel))</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug()&lt;&lt;&quot;选择的是保存&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            else  qDebug()&lt;&lt;&quot;选择的是取消&quot;;</span><br><span class="line">            </span><br><span class="line">            //警告提示</span><br><span class="line">            QMessageBox::warning(this,&quot;warning&quot;,&quot;警告！&quot;);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><h3 id="07-其他标准对话框"><a href="#07-其他标准对话框" class="headerlink" title="07 其他标准对话框"></a>07 其他标准对话框</h3><ul><li>颜色对话框   QColorDialog::getColor</li><li>文件对话框 QFileDialog::getOpenFileName（父亲，标题，默认路径，过滤文件）</li><li>字体对话框 QFontDialog::getFont</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色对话框 没有加QColor函数默认是白色</span></span><br><span class="line">    QColor color = QColorDialog::<span class="built_in">getColor</span>(<span class="built_in">QColor</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;color.<span class="built_in">red</span>()&lt;&lt;color.<span class="built_in">blue</span>()&lt;&lt;color.<span class="built_in">green</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字体对话框</span></span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    QFont font=QFontDialog::<span class="built_in">getFont</span>(&amp;ok,<span class="built_in">QFont</span>(<span class="string">&quot;华文彩云&quot;</span>,<span class="number">10</span>));</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;字体&quot;</span>&lt;&lt;font.<span class="built_in">family</span>()&lt;&lt;<span class="string">&quot;字号&quot;</span>&lt;&lt;font.<span class="built_in">pointSize</span>()&lt;&lt;<span class="string">&quot;加粗&quot;</span>&lt;&lt;font.<span class="built_in">bold</span>()&lt;&lt;<span class="string">&quot;倾斜&quot;</span>&lt;&lt;font.<span class="built_in">italic</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件对话框</span></span><br><span class="line">    QString str= QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>,<span class="string">&quot;打开文件&quot;</span>,<span class="string">&quot;C:\\Users\\23861\\Desktop&quot;</span>,<span class="string">&quot;(*.txt *.docx)&quot;</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br></pre></td></tr></table></figure><h3 id="08-登陆窗口布局"><a href="#08-登陆窗口布局" class="headerlink" title="08 登陆窗口布局"></a>08 登陆窗口布局</h3><ul><li>界面布局<ul><li>实现登陆窗口</li><li>利用布局方式 给窗口进行美化</li><li>选取widget进行布局，水平布局，垂直布局，栅格布局</li><li>给用户名、密码、登陆、退出按钮进行布局</li><li>默认窗口和控件之间有9间隙，可以调整 layoutLeftMargin</li><li>利用弹簧进行布局</li></ul></li></ul><h3 id="09-控件"><a href="#09-控件" class="headerlink" title="09 控件"></a>09 控件</h3><ul><li>按钮组<ul><li>QPushButton 常用按钮</li><li>QToolButton 工具按钮 用于显示图片 如果想显示文字，修改风格：toolButtonStyle</li><li>radioButton 单选按钮，设置默认：ui-&gt;rBtnMan-&gt;setChecked(true);</li><li>checkBox 多选按钮，监听状态：2是选中 1是半选中 0是未选中</li></ul></li></ul><h3 id="10-QListWidget控件"><a href="#10-QListWidget控件" class="headerlink" title="10 QListWidget控件"></a>10 QListWidget控件</h3><ul><li>QListWidget列表容器<ul><li>QListWidgetitem 一行内容</li><li>ui-&gt;listWidget-&gt;additem(item);</li><li>设置居中方式item-&gt;setTextAlignment(Qt::AlignHCenter);</li></ul></li></ul><h3 id="11-QTreeWidget树控件"><a href="#11-QTreeWidget树控件" class="headerlink" title="11 QTreeWidget树控件"></a>11 QTreeWidget树控件</h3><ul><li><p>设置头</p><ul><li>```c++<br>ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt;”英雄”&lt;&lt;”英雄介绍”);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 创建根节点</span><br><span class="line"></span><br><span class="line">  + ```</span><br><span class="line">    QTreeWidgetItem* liItem =new QTreeWidgetItem(QStringList()&lt;&lt;&quot;力量&quot;);</span><br><span class="line">    QTreeWidgetItem* minItem =new QTreeWidgetItem(QStringList()&lt;&lt;&quot;敏捷&quot;);</span><br><span class="line">    QTreeWidgetItem* zhiItem =new QTreeWidgetItem(QStringList()&lt;&lt;&quot;智力&quot;);  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加根节点到树控件上</p><ul><li><p>```c++<br>//加载顶层的节点</p><pre><code>ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);ui-&gt;treeWidget-&gt;addTopLevelItem(minItem);ui-&gt;treeWidget-&gt;addTopLevelItem(zhiItem);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 添加子节点</span><br><span class="line"></span><br><span class="line">  + ```c++</span><br><span class="line">    //追加子节点</span><br><span class="line">        QStringList heroL1;</span><br><span class="line">        heroL1 &lt;&lt; &quot;刚被猪&quot; &lt;&lt; &quot;前排坦克，能在吸收伤害的同时造成可观的范围输出&quot;;</span><br><span class="line">        QTreeWidgetItem* l1 =new QTreeWidgetItem(heroL1);</span><br><span class="line">        liItem-&gt;addChild(l1);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="12-QTableWidget控件"><a href="#12-QTableWidget控件" class="headerlink" title="12 QTableWidget控件"></a>12 QTableWidget控件</h3><ul><li><p>设置列数</p><ul><li>```c++<br>   //TableWidget控件<pre><code>//设置列数ui-&gt;tableWidget-&gt;setColumnCount(3);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 设置水平表头</span><br><span class="line"></span><br><span class="line">  + ```c++</span><br><span class="line">        //设置水平表头</span><br><span class="line">        ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt;&quot;性别&quot;&lt;&lt;&quot;年龄&quot;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置行数</p><ul><li>```c++<pre><code>//设置 行数ui-&gt;tableWidget-&gt;setRowCount(5);</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 设置正文</span><br><span class="line"></span><br><span class="line">  + ```c++</span><br><span class="line">    //    //设置正文</span><br><span class="line">    //    ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(&quot;亚瑟&quot;));</span><br><span class="line">    </span><br><span class="line">        QStringList nameList;</span><br><span class="line">        nameList&lt;&lt;&quot;亚瑟&quot;&lt;&lt;&quot;赵云&quot;&lt;&lt;&quot;张飞&quot;&lt;&lt;&quot;关羽&quot;&lt;&lt;&quot;花木兰&quot;;</span><br><span class="line">        QList&lt;QString&gt; sexList;</span><br><span class="line">        sexList&lt;&lt;&quot;男&quot;&lt;&lt;&quot;男&quot;&lt;&lt;&quot;男&quot;&lt;&lt;&quot;男&quot;&lt;&lt;&quot;女&quot;;</span><br><span class="line">        for(int i=0;i&lt;5;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int col=0;</span><br><span class="line">            ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(nameList[i]));</span><br><span class="line">            ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(sexList.at(i)));</span><br><span class="line">    //        ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(&quot;18&quot;));</span><br><span class="line">            //int 转QString</span><br><span class="line">            ui-&gt;tableWidget-&gt;setItem(i,col++,new QTableWidgetItem(QString::number(i+18)));</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="13-其它常用控件介绍"><a href="#13-其它常用控件介绍" class="headerlink" title="13 其它常用控件介绍"></a>13 其它常用控件介绍</h3><ul><li>stackedWidget控件：<ul><li>ui-&gt;stackedWidget-&gt;setCurrentIndex(1);</li></ul></li><li>下拉框<ul><li>ui-&gt;comboBox-&gt;addItem(“奔驰”)；</li></ul></li><li>QLabel 显示图片</li><li>QLabel 显示动图<ul><li>设置后要加movie-&gt;start();</li></ul></li></ul><h2 id="DAY3"><a href="#DAY3" class="headerlink" title="DAY3"></a>DAY3</h2><h3 id="02-自定义控件封装"><a href="#02-自定义控件封装" class="headerlink" title="02 自定义控件封装"></a>02 自定义控件封装</h3><ul><li>自定义控件封装<ul><li>添加新文件    Qt-设计师界面类(.h   .cpp   .ui)</li><li>.ui中 设计 QSpringBox 和QSlider 两个控件</li><li>Widget中使用自定义控件，拖拽一个Widget，点击提升为，点击添加，点击提升</li><li>实现功能，改变数字，滑动条跟着移动，信号槽监听</li><li>提供getNum和setNum对外接口</li><li>测试接口</li></ul></li></ul><h3 id="03-Qt中的鼠标事件"><a href="#03-Qt中的鼠标事件" class="headerlink" title="03 Qt中的鼠标事件"></a>03 Qt中的鼠标事件</h3><ul><li>鼠标事件</li><li>鼠标进入事件 enterEvent</li><li>鼠标离开事件 leaveEvent</li><li>鼠标按下 mousePressEvent(QMouseEvent *ev)</li><li>鼠标释放 mouseReleaseEvent(QMouseEvent *ev)</li><li>鼠标移动 mouseMoveEvent(QMouseEvent *ev)</li><li>ev-&gt;x()  x坐标 ev-&gt;y()  y坐标</li><li>ev-&gt;button() 可以判断所有按键 Qt::LeftButton Qt::RightButton</li><li>ev-&gt;buttons()判断组合按键 判断move时候的左右键 结合&amp;操作符</li><li>格式化字符串 QString(“%1 %2”).arg(111).arg(222)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">myWidget::<span class="built_in">myWidget</span>(QWidget *parent) : <span class="built_in">QLabel</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设置鼠标的追踪状态</span></span><br><span class="line">    <span class="built_in">setMouseTracking</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myWidget::enterEvent</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;enter&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myWidget::leaveEvent</span><span class="params">(QEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;leave&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myWidget::mouseMoveEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//鼠标左键按下，提示信息</span></span><br><span class="line"><span class="comment">//    if(ev-&gt;buttons()&amp;Qt::LeftButton)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line">        QString str=<span class="built_in">QString</span>(<span class="string">&quot;move x=%1 y=%2&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myWidget::mousePressEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//鼠标左键按下，提示信息</span></span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">button</span>()==Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        QString str=<span class="built_in">QString</span>(<span class="string">&quot;press x=%1 y=%2&quot;</span>).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">x</span>()).<span class="built_in">arg</span>(ev-&gt;<span class="built_in">y</span>());</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myWidget::mouseReleaseEvent</span><span class="params">(QMouseEvent *ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;release&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="04-定时器1"><a href="#04-定时器1" class="headerlink" title="04 定时器1"></a>04 定时器1</h3><ul><li>利用时间 void timerEvent(QTimerEvent*ev);</li><li>启动定时器 startTimer(1000) 毫秒单位</li><li>timerEvent的返回值是定时器的唯一表示 可以和ev-&gt;timerId作比较</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    id1=<span class="built_in">startTimer</span>(<span class="number">1000</span>);<span class="comment">//参数1 间隔 单位 毫秒</span></span><br><span class="line">    id2=<span class="built_in">startTimer</span>(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerEvent</span><span class="params">(QTimerEvent* ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>()==id1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//label2 每隔1秒+1</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line">        ui-&gt;label_2-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ev-&gt;<span class="built_in">timerId</span>()==id2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//label3 每隔2秒+1</span></span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num2=<span class="number">1</span>;</span><br><span class="line">        ui-&gt;label_3-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num2+=<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="05-定时器2"><a href="#05-定时器2" class="headerlink" title="05 定时器2"></a>05 定时器2</h3><ul><li>利用定时器类Qtimer</li><li>创建定时器对象 QTimer *timer=new QTimer(this)</li><li>启动定时器 timer-&gt;start(毫秒)</li><li>每隔一定毫秒 发送信号timeout 进行监听</li><li>暂停timer-&gt;stop</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器第二种方式</span></span><br><span class="line">    QTimer * timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//启动定时器</span></span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(timer,&amp;QTimer::timeout,[=]()&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//label4 每隔0.5秒+1</span></span><br><span class="line">        ui-&gt;label_4-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(num++));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="06-event事件分发器"><a href="#06-event事件分发器" class="headerlink" title="06 event事件分发器"></a>06 event事件分发器</h3><ul><li>用途：用于事件的分发</li><li>也可以做拦截操作，不建议</li><li>bool event（QEvent* e）</li><li>返回值 如果是true 代表用户处理这个事件，不向下分发了</li><li>e-&gt;type()==鼠标按下</li></ul><h3 id="07-事件过滤器"><a href="#07-事件过滤器" class="headerlink" title="07 事件过滤器"></a>07 事件过滤器</h3><ul><li>在程序将事件分发到事件分发器前，可以利用过滤器做拦截</li><li>步骤<ul><li>给控件安装事件过滤器</li><li>重写eventFilter(obj,e)函数</li></ul></li></ul><h3 id="08-QPainter-绘图"><a href="#08-QPainter-绘图" class="headerlink" title="08 QPainter 绘图"></a>08 QPainter 绘图</h3><ul><li>绘图事件 void Widget::paintEvent(QPaintEvent*)</li><li>声明一个画家对象  QPainter painter(this);</li><li>画线，画圆，画矩形，画文字</li><li>设置画笔 QPen 设置画笔宽度 风格</li><li>设置画刷 QBrush 设置画刷 风格</li><li>如果要刷新，那么用update()函数或者repaint()函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent*)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化画家对象 this 指定的是绘图的设备</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔宽度</span></span><br><span class="line">    pen.<span class="built_in">setWidth</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔风格</span></span><br><span class="line">    pen.<span class="built_in">setStyle</span>(Qt::DotLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让画家使用这个画笔</span></span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷</span></span><br><span class="line"><span class="comment">//    QBrush brush(QColor(0,255,0));</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::cyan)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setBrush</span>(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画线</span></span><br><span class="line">    painter.<span class="built_in">drawLine</span>(<span class="built_in">QPoint</span>(<span class="number">0</span>,<span class="number">0</span>),<span class="built_in">QPoint</span>(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画圆</span></span><br><span class="line">    painter.<span class="built_in">drawEllipse</span>(<span class="built_in">QPoint</span>(<span class="number">100</span>,<span class="number">100</span>),<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画矩形</span></span><br><span class="line">    painter.<span class="built_in">drawRect</span>(<span class="built_in">QRect</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画文字</span></span><br><span class="line">    painter.<span class="built_in">drawText</span>(<span class="built_in">QRect</span>(<span class="number">10</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>),<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="09-QPainter高级设置"><a href="#09-QPainter高级设置" class="headerlink" title="09 QPainter高级设置"></a>09 QPainter高级设置</h3><ul><li><p>抗锯齿 效率低</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br></pre></td></tr></table></figure></li><li><p>对画家进行移动</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">painter.<span class="built_in">translate</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>保存状态 save</p></li><li><p>还原状态 restore</p></li><li><p>如果想手动调用绘图时间 利用update</p></li><li>利用画家画图片 painter.drawPixmap(x,y,QPixmap””);</li></ul><h3 id="11-绘图设备"><a href="#11-绘图设备" class="headerlink" title="11 绘图设备"></a>11 绘图设备</h3><ul><li>QPixmap QImage QBitmap(黑白色) QPicture QWidget</li><li>QPixmap对不同平台做了显示的优化<ul><li>QPixmap pix(300,300);</li><li>pix.fill(颜色)</li><li>利用画家 往pix上画画</li><li>保存 pix.save(“路径”)</li></ul></li><li>QImage 可以对像素进行访问<ul><li>使用和QPixmap差不多QImage img(300,300,QImage::Format_RGB32);</li><li>其他流程一样</li><li>可以对像素进行修改 img.setPixel(i,j,value);</li></ul></li><li>QPicture 记录和重现 绘图的指令<ul><li>QPicture pic</li><li>painter.begin(&amp;pic)</li><li>保存 pic.save(任意后缀名)</li><li>重现 利用画家可以重现 painter.drawPicture(0,0,pic);</li></ul></li></ul><h3 id="12-QFile对文件进行读写操作"><a href="#12-QFile对文件进行读写操作" class="headerlink" title="12 QFile对文件进行读写操作"></a>12 QFile对文件进行读写操作</h3><ul><li>QFile进行读写操作</li><li>QFile file(path 文件路径)</li><li>file.open(打开方式)</li><li>读<ul><li>全部读取 file.readAll()</li><li>按行读 file.readLine()</li><li>atend()判断是否读到文件尾</li><li>利用编码格式</li></ul></li><li>写<ul><li>file.open()</li><li>file.write()</li></ul></li></ul><h3 id="13QFileInfo-读取文件信息"><a href="#13QFileInfo-读取文件信息" class="headerlink" title="13QFileInfo 读取文件信息"></a>13QFileInfo 读取文件信息</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QFileInfo 文件信息类</span></span><br><span class="line"><span class="function">QFileInfo <span class="title">info</span><span class="params">(path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;大小 ：&quot;</span>&lt;&lt;info.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;后缀名: &quot;</span>&lt;&lt;info.<span class="built_in">suffix</span>()&lt;&lt;<span class="string">&quot; 文件名称： &quot;</span>&lt;&lt;info.<span class="built_in">fileName</span>()&lt;&lt;<span class="string">&quot;文件路径： &quot;</span>&lt;&lt;info.<span class="built_in">path</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;创建日期： &quot;</span>&lt;&lt;info.<span class="built_in">created</span>().<span class="built_in">toString</span>(<span class="string">&quot;yy/MM/dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;修改日期： &quot;</span>&lt;&lt;info.<span class="built_in">lastModified</span>().<span class="built_in">toString</span>(<span class="string">&quot;yy MM dd hh:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QRect <span class="title">rect</span><span class="params">(<span class="number">10</span> * i + <span class="number">100</span>, <span class="number">10</span> * j + <span class="number">100</span>, <span class="number">10</span>, <span class="number">10</span>)</span></span>; <span class="comment">// 定义每个格子的位置和大小</span></span><br><span class="line">                <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::red)</span></span>;  <span class="comment">// 创建红色画刷</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用红色画刷填充矩形</span></span><br><span class="line">                painter.<span class="built_in">fillRect</span>(rect, brush);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果需要绘制边框，可以取消注释以下行</span></span><br><span class="line">                painter.<span class="built_in">setPen</span>(Qt::black); <span class="comment">// 设置边框颜色</span></span><br><span class="line">                painter.<span class="built_in">drawRect</span>(rect); <span class="comment">// 绘制边框</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filename= QFileDialog::getOpenFileName(this,&quot;打开文件&quot;,&quot;C:\\Users\\23861\\Desktop&quot;,&quot;(*.txt *.docx)&quot;);</span><br><span class="line">qDebug()&lt;&lt;filename;</span><br><span class="line">QFile file(filename);</span><br><span class="line">file.open(QIODevice::ReadOnly);</span><br><span class="line">QString firstline=file.readLine();</span><br><span class="line">qDebug()&lt;&lt;firstline;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SEP课程代码分享（2022SPRING)-lab2</title>
      <link href="/2023/03/22/sep-ke-cheng-dai-ma-fen-xiang-2022spring-lab2/"/>
      <url>/2023/03/22/sep-ke-cheng-dai-ma-fen-xiang-2022spring-lab2/</url>
      
        <content type="html"><![CDATA[<hr><p>首先，奉上lab的具体要求：</p><h1 id="Lab2-MiniEd"><a href="#Lab2-MiniEd" class="headerlink" title="Lab2: MiniEd"></a>Lab2: MiniEd</h1><p>Ed是一个非常古老的行文本编辑器，曾经被用于文本文件的创建、显示、更改和其他一些操作。</p><p>Ed有两种模式，刚运行时Ed处于命令模式（command mode）。此时输入到Ed的文本会被当做命令进行处理。通过一些特殊命令，Ed可以被切换到输入模式（input mode），在输入模式下输入的文本会被当做文件内容进行保存。</p><p>本次Lab的任务是使用C++通过面向对象的方法完成一个简化版的Ed编辑器MiniEd。在MiniEd中，仅需实现Ed命令的一个子集。</p><h4 id="命令与符号解释"><a href="#命令与符号解释" class="headerlink" title="命令与符号解释"></a>命令与符号解释</h4><p>在以下列出的Ed命令中，每个<code>?</code>为一个数字n，表示第n行。其值应该在第一行到最后一行之间（包含第一行和最后一行）。</p><p>每个<code>?,?</code>表示一个区间，其中<code>?</code>的含义同上。如<code>1,2</code>表示第一行到第二行；<code>5,11</code>表示第五行到第十一行；<code>6,6</code>表示第六行。应保证区间起点不大于终点。</p><p>每个命令为一行输入，以下为需要实现的命令说明。</p><blockquote><ul><li><p><code>a</code></p><p>Appends text to the buffer after the current address line. If the current address is zero, the entered text is placed at the beginning of the buffer. Text is entered in input mode. The current address is set to the address of the last line entered or, if there were none, the current address is not changed.  </p><p>在当前地址行后将文本追加到缓冲区。如果当前地址为零，输入的文本被放置在缓冲区的开头。文本在输入模式下输入。当前地址被设置为输入的最后一行的地址，当前地址不变。</p></li><li><p><code>?,?d</code></p><p>Deletes the addressed lines from the buffer. The current address is set to the new address of the line after the last line deleted; if the lines deleted were originally at the end of the buffer, the current address is set to the address of the new last line; if no lines remain in the buffer, the current address is set to zero.  </p><p>从缓冲区中删除寻址行。当前地址被设置为删除最后一行之后的行的新地址；如果删除的行最初位于缓冲区的末尾，则将当前地址设置为新的最后一行的地址；如果缓冲区中没有剩余行，则当前地址设置为零。</p></li><li><p><code>i</code></p><p>Inserts text in the buffer before the current addressed line. If the current address is zero, the entered text is placed at the beginning of the buffer. Text is entered in input mode. The current address is set to the address of the last line entered or, if there were none, the current address is not changed. </p><p>在缓冲区中当前地址行之前插入文本。如果当前地址为零，则输入的文本将放在缓冲区的开头。文本在输入模式下输入。当前地址设置为最后一行输入的地址，如果没有，则当前地址不变。 </p></li><li><p><code>?,?n</code></p><p>Number command. Prints the addressed lines, preceding each line by its line number and a \<tab> (<code>&#39;\t&#39;</code>). The current address is set to the address of the last line printed. Specially, <code>1,$n</code> prints all lines in the buffer.</p><p>数字命令。打印已寻址的行，在每行前面按行号和<tab>（“\t”）。当前地址设置为打印的最后一行的地址。特别是，1$n打印缓冲区中的所有行。</p></li><li><p><code>Q</code></p><p>Quits ed unconditionally. Unwritten changes are discarded.</p><p>无条件退出。放弃未写入的更改 </p></li><li><p><code>w file</code></p><p>Writes all lines to file and prints the number of bytes written to the file. Print an error if no filename is specified. The current address is unchanged.</p><p>将所有行写入文件并打印写入文件的字节数。如果未指定文件名，则打印错误。当前地址不变。</p></li><li><p><code>?</code></p><p>Null command. An address alone prints the addressed line. The current address is set to the address of the printed line.</p><p>空命令。地址单独打印地址行。当前地址设置为打印行的地址。</p></li></ul></blockquote><p>对于无效指令或错误指令，请输出一个以问号开头的错误提示信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Bad/Unknown command</span><br></pre></td></tr></table></figure><h4 id="程序大体逻辑"><a href="#程序大体逻辑" class="headerlink" title="程序大体逻辑"></a>程序大体逻辑</h4><p>MiniEd的部分代码已经给出，共五个文件：<code>Buffer.cc</code>、<code>Buffer.h</code>、<code>Editor.cc</code>、<code>Editor.h</code>和<code>ed.cc</code>。其中<code>Buffer.cc/h</code>、<code>Editor.cc/h</code>分别声明和实现了两个类。<code>ed.cc</code>中包含了<code>main</code>函数，并在其中建造并运行了一个<code>Editor</code>实例。在<code>Editor::run</code>中，程序会不断读入命令，对命令进行解析并调用相应的函数（<code>Editor::cmdXXX</code>）。<code>Buffer</code>类用于保存所有输入的文本，其中每行文本保存在一个<code>string</code>类型的字符串中，所有的行保存在一个链表中。<code>Buffer</code>类有各种用于操作和展示文本的函数，供<code>Editor</code>调用。</p><p><img src="http://www.plantuml.com/plantuml/png/ZL5BIWGn4Dtd55bsDds0Tk7uKH1aG134PPnKsuNvX5J5lhx5J1o4Y7OsATxdvL7P4Tl2DNYbZfDIKx0O1tCXqvr3JcMQIZq1wu8UzF1KaI-DHjB3FXcbzLdeaBBbmt8Jd1Y4cLFvaEk7v13SLSuGcq2OwphF88njy3YEtrPjtwLC5_0G2GgV0_utt887Xkv5TuGVCG89ztV4leOtA5q4BMdT5l1Iy9SAgw3mdExHmuOAtdS18NsANoeqlwpmj7KPsd-z0XabXpXbjHEy1ly5" alt=""></p><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p><strong>代码</strong>：</p><ol><li>实现一个<strong>链表</strong>，并作为<code>Buffer</code>的成员，用于保存所有行。</li><li>实现<code>Buffer::writeToFile</code>，将当前所有的文本保存到指定文件中，并打印所保存的字节数。</li><li>实现<code>Buffer::showLines</code>，将相应的文本行以规定格式打印出来。</li><li>实现<code>Buffer::insertLine</code>，将指定文本插入到当前行之前。</li><li>实现<code>Editor::cmdAppend</code>，完成对<code>a</code>命令的处理。</li><li>在<code>Editor::dispatchCmd</code>中，完成对<code>cmdWrite</code>的调用。</li><li>在<code>Editor::dispatchCmd</code>中，完成对<code>1,$n</code>情况的判断，以及后续的处理。</li><li>完成<code>Editor</code>的析构函数。</li><li>添加对各种异常情况的处理。异常情况如指定了错误的行号区间、指定了超出范围的行号等。</li></ol><p><strong>链表请自主实现，不可使用任何第三方库的实现。</strong></p><p>除ed.cc外，可以随意更改代码，实现了要求的功能即可。</p><p><strong>回答问题</strong>：</p><ol><li>请解释在<code>Editor::dispatchCmd</code>中下述代码的逻辑，尤其注意对stringstream的使用。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> start, end;</span><br><span class="line"><span class="type">char</span> comma, type = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="function">stringstream <span class="title">ss</span><span class="params">(cmd)</span></span>;</span><br><span class="line">ss &gt;&gt; start;</span><br><span class="line"><span class="keyword">if</span> (ss.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">    <span class="built_in">cmdNull</span>(start);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ss &gt;&gt; comma &gt;&gt; end &gt;&gt; type;</span><br><span class="line"><span class="keyword">if</span> (ss.<span class="built_in">good</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">cmdNumber</span>(start, end);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">cmdDelete</span>(start, end);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">cmd&gt; a  </span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3       int main()</span><br><span class="line">4       &#123;</span><br><span class="line">5       &#125;</span><br><span class="line">cmd&gt; 3</span><br><span class="line">int main()</span><br><span class="line">cmd&gt; i</span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#includ</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3       using namespace std;</span><br><span class="line">4</span><br><span class="line">5       #includ</span><br><span class="line">6       int main()</span><br><span class="line">7       &#123;</span><br><span class="line">8       &#125;</span><br><span class="line">cmd&gt; 4,5d</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3       using namespace std;</span><br><span class="line">4       int main()</span><br><span class="line">5       &#123;</span><br><span class="line">6       &#125;</span><br><span class="line">cmd&gt; 1,3c</span><br><span class="line">? Bad/Unknown command</span><br><span class="line">cmd&gt; 1,5n</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3       using namespace std;</span><br><span class="line">4       int main()</span><br><span class="line">5       &#123;</span><br><span class="line">cmd&gt; a</span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">    cout &lt;&lt; &quot;Hello my editor&quot; &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1       #include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3       using namespace std;</span><br><span class="line">4       int main()</span><br><span class="line">5       &#123;</span><br><span class="line">6           cout &lt;&lt; &quot;Hello my editor&quot; &lt;&lt; endl;</span><br><span class="line">7           </span><br><span class="line">8           return 0;</span><br><span class="line">9       &#125;</span><br><span class="line">cmd&gt; write</span><br><span class="line">? Bad/Unknown command</span><br><span class="line">cmd&gt; 1,999n</span><br><span class="line">? Line number out of range</span><br><span class="line">cmd&gt; 9,1n</span><br><span class="line">? Number range error</span><br><span class="line">cmd&gt; 4,2d</span><br><span class="line">? Delete range error</span><br><span class="line">cmd&gt; 2019</span><br><span class="line">? Line number out of range</span><br><span class="line">cmd&gt; w hello.cc</span><br><span class="line">114 byte(s) written</span><br><span class="line">cmd&gt; Q</span><br></pre></td></tr></table></figure><h4 id="输出格式规范"><a href="#输出格式规范" class="headerlink" title="输出格式规范"></a>输出格式规范</h4><ul><li><p>你的程序应该从标准输入<code>stdin</code>中获取输入，输出到标准输出<code>stdout</code></p></li><li><p>输出行时，行号和内容之间用一个制表符（\t）隔开</p></li><li><p>Write指令成功后输出写入的字节数：<code>%d byte(s) written</code></p><ul><li>统计输出字节数需要统计可见的字符和所有不可见的字符（包括所有空格和每行末尾的换行符），按照ASCII编码每个字符占一字节。一般来说，使用流输出或者C语言的输出函数时，可以通过相关函数或者输出函数返回值得知成功输出的字节数。自己计算字符串长度统计也可以。</li></ul></li><li><p>错误处理：</p><ul><li>指令错误：<code>？ Bad/Unknown command</code></li><li>行号越界：<code>？ Line number out of range</code></li><li>Number指令中范围错误：<code>? Number range error</code></li><li>Delete指令中范围错误：<code>? Delete range error</code></li><li>Write指令中未指定文件名：<code>? Filename not specified</code></li></ul><p>补充说明：</p><p>非数字的范围判定为指令错误。例：<code>1,xn</code>判定为指令错误，而非范围错误</p><p>范围错误优先于行号越界。例：<code>999,1n</code>判定为范围错误，而非行号越界</p></li><li><p>提示性的输出不作规定。例如样例中的<code>cmd&gt;</code>以及<code>It&#39;s input mode now. Quit with a line with a single dot(.)</code></p></li></ul><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>提交时，请将</p><ul><li>你完成的MiniEd源代码和你对上述问题的回答<code>lab2-XXX.pdf</code>放在同一个文件夹下，该文件夹名应为<code>lab2</code></li><li>将<code>lab2</code>文件夹压缩成7z压缩包，并重命名为<code>lab2-XXX.7z</code></li></ul><p>上传到 canvas 中。</p><p>文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lab2-XXX.7z</span><br><span class="line">└── lab2</span><br><span class="line">    ├── Buffer.cc</span><br><span class="line">    ├── Buffer.h</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    ├── ed.cc</span><br><span class="line">    ├── Editor.cc</span><br><span class="line">    ├── Editor.h</span><br><span class="line">    ├── lab2-XXX.pdf</span><br><span class="line">    └── spec</span><br><span class="line">        ├── lab2.md</span><br><span class="line">        └── lab2.pdf</span><br></pre></td></tr></table></figure><p>（其中XXX为学号，如<code>lab2-518037910001.7z</code>和<code>lab2-518037910001.pdf</code>）</p><p>如果需要更改，请在文件名后加版本号，最终以最高版本号为准。如第二次提交可用<code>lab2-518037910001-2.7z</code>。</p><p>其余要求同 lab1。</p><p><strong>注1：</strong>未按照格式提交可能会引起评测错误，导致零分</p><p><strong>注2：</strong>建议将代码写入提供的框架代码文件中。将代码写入新建的源代码文件可能会导致评测时编译失败</p><p><strong>注3：</strong>本次实验可以多次提交，每30分钟将会进行一次自动评测</p><hr><p>要求结束</p><p>奉上代码（自己写的，可能不够完美）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Buffer.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Buffer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> your code here</span></span><br><span class="line"><span class="comment">//first we can implement the functions in list;</span></span><br><span class="line">edlist::<span class="built_in">edlist</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head=<span class="keyword">new</span> node;</span><br><span class="line">    currentLength=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">edlist::clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    node*p=head-&gt;next,*q;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">    currentLength=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">edlist::node *<span class="title">edlist::move</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    node*p=head;</span><br><span class="line">    <span class="keyword">while</span>(i--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">edlist::insert</span><span class="params">(<span class="type">int</span> i, <span class="type">const</span> std::string &amp;x)</span> </span>&#123;</span><br><span class="line">    node* pos;</span><br><span class="line">    pos=<span class="built_in">move</span>(i<span class="number">-1</span>);</span><br><span class="line">    pos-&gt;next=<span class="keyword">new</span> <span class="built_in">node</span>(x,pos-&gt;next);</span><br><span class="line">    ++currentLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">edlist::remove</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    node *pos,*delp;</span><br><span class="line">    pos=<span class="built_in">move</span>(i<span class="number">-1</span>);</span><br><span class="line">    delp=pos-&gt;next;</span><br><span class="line">    pos-&gt;next=delp-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> delp;</span><br><span class="line">    --currentLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edlist::search</span><span class="params">(<span class="type">const</span> std::string &amp;x)</span> </span>&#123;</span><br><span class="line">    node*p=head-&gt;next;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">edlist::traverse</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    node*p=head-&gt;next;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        std::cout&lt;&lt;i&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        std::cout&lt;&lt;p-&gt;data&lt;&lt;std::endl;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edlist::length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">edlist::visit</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    node* tmp= <span class="built_in">move</span>(i);</span><br><span class="line">    std::cout&lt;&lt;tmp-&gt;data;</span><br><span class="line">    std::cout&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//implement the functions in ListBuffer</span></span><br><span class="line">Buffer::<span class="built_in">Buffer</span>() &#123;</span><br><span class="line">    list=<span class="keyword">new</span> edlist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Buffer::~<span class="built_in">Buffer</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Buffer::writeToFile</span><span class="params">(<span class="type">const</span> string &amp;filename)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> allByte=<span class="number">0</span>;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">afile</span><span class="params">(filename)</span></span>;</span><br><span class="line">    edlist::node *p=list-&gt;head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        allByte+=p-&gt;data.<span class="built_in">size</span>();</span><br><span class="line">        afile&lt;&lt;p-&gt;data;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        allByte++;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;allByte&lt;&lt;<span class="string">&quot; byte(s) written&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    afile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Buffer::showLines</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=from;i&lt;=to;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edlist::node* tmp=list-&gt;<span class="built_in">move</span>(i);</span><br><span class="line">        std::cout&lt;&lt;i&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        std::cout&lt;&lt;tmp-&gt;data&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Buffer::deleteLines</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=to-from;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        list-&gt;<span class="built_in">remove</span>(from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Buffer::insertLine</span><span class="params">(<span class="type">const</span> string &amp;text,<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list-&gt;<span class="built_in">insert</span>(a,text);</span><br><span class="line">    currentLineNum=a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Buffer::appendLine</span><span class="params">(<span class="type">const</span> string &amp;text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">insertLine</span>(text,currentLineNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> string &amp;<span class="title">Buffer::moveToLine</span><span class="params">(<span class="type">int</span> idx)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edlist::node* tmp=list-&gt;<span class="built_in">move</span>(idx);</span><br><span class="line">    <span class="keyword">return</span> tmp-&gt;data;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Buffer.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">edlist</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i,<span class="type">const</span> string &amp;x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">const</span> string &amp;x)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">visit</span><span class="params">(<span class="type">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">    <span class="built_in">edlist</span>();</span><br><span class="line">    ~<span class="built_in">edlist</span>()&#123;&#125;;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">    &#123;</span><br><span class="line">        string data;</span><br><span class="line">        node* next;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">const</span> string &amp;x,node* n=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            data=x;next=n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">node</span>():<span class="built_in">next</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">        ~<span class="built_in">node</span>()&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    node* head;</span><br><span class="line">    <span class="type">int</span> currentLength;</span><br><span class="line">    <span class="function">node* <span class="title">move</span><span class="params">(<span class="type">int</span> i)</span><span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> currentLineNum;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> add a List here for storing the input lines</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Buffer</span>();</span><br><span class="line">    ~<span class="built_in">Buffer</span>();</span><br><span class="line">    edlist* list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> string &amp;filename)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">const</span> string &amp;<span class="title">moveToLine</span><span class="params">(<span class="type">int</span> idx)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showLines</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteLines</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertLine</span><span class="params">(<span class="type">const</span> string &amp;text,<span class="type">int</span> a)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendLine</span><span class="params">(<span class="type">const</span> string &amp;text)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ed.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Editor ed;</span><br><span class="line">    ed.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Editor.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">Editor::<span class="built_in">Editor</span>()</span><br><span class="line">&#123;</span><br><span class="line">    buffer = <span class="keyword">new</span> <span class="built_in">Buffer</span>();</span><br><span class="line">&#125;</span><br><span class="line">Editor::~<span class="built_in">Editor</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Implement destructor</span></span><br><span class="line">    <span class="keyword">delete</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string cmd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;cmd&gt; &quot;</span>;</span><br><span class="line">        cout.<span class="built_in">flush</span>();</span><br><span class="line">        <span class="built_in">getline</span>(cin, cmd);</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;Q&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">dispatchCmd</span>(cmd);</span><br><span class="line">        &#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span> *e) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="built_in">catch</span> (<span class="type">const</span> out_of_range &amp;oor) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; oor.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="built_in">catch</span> (<span class="type">const</span> range_error &amp;re) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; re.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdAppend</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//it&#x27;s function:</span></span><br><span class="line">    <span class="comment">//Appends text to the buffer after the current address line. If the current address is zero,</span></span><br><span class="line">    <span class="comment">//the entered text is placed at the beginning of the buffer. Text is entered in input mode.</span></span><br><span class="line">    <span class="comment">//The current address is set to the address of the last line entered or, if there were none,</span></span><br><span class="line">    <span class="comment">//the current address is not changed.</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It&#x27;s input mode now. Quit with a line with a single dot(.)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> finish cmdAppend.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        string text;</span><br><span class="line">        <span class="built_in">getline</span>(cin,text);</span><br><span class="line">        <span class="keyword">if</span>(text==<span class="string">&quot;.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (currentLine==<span class="number">0</span>) &#123;</span><br><span class="line">            buffer-&gt;<span class="built_in">insertLine</span>(text,currentLine+<span class="number">1</span>);</span><br><span class="line">            currentLine++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            buffer-&gt;<span class="built_in">insertLine</span>(text,currentLine+<span class="number">1</span>);</span><br><span class="line">            currentLine++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdInsert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;It&#x27;s input mode now. Quit with a line with a single dot(.)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">bool</span> firstLine = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        string text;</span><br><span class="line">        <span class="built_in">getline</span>(cin, text);</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">/*if (firstLine) &#123;</span></span><br><span class="line"><span class="comment">            buffer-&gt;insertLine(text,currentLine);</span></span><br><span class="line"><span class="comment">            firstLine = false;</span></span><br><span class="line"><span class="comment">        &#125;  else &#123;</span></span><br><span class="line"><span class="comment">            buffer-&gt;insertLine(text,currentLine+1);</span></span><br><span class="line"><span class="comment">            currentLine++;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span>(currentLine==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            firstLine= <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            buffer-&gt;<span class="built_in">insertLine</span>(text,currentLine+<span class="number">1</span>);</span><br><span class="line">            currentLine++;</span><br><span class="line">            currentLine++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            firstLine= <span class="literal">false</span>;</span><br><span class="line">            buffer-&gt;<span class="built_in">insertLine</span>(text,currentLine);</span><br><span class="line">            currentLine++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(firstLine== <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currentLine--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdDelete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;start)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Delete range error&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;=<span class="number">0</span>||end&gt;buffer-&gt;list-&gt;currentLength)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Line number out of range&quot;</span>;</span><br><span class="line">    <span class="type">bool</span>  flag= <span class="literal">true</span>;</span><br><span class="line">    <span class="type">bool</span> anot= <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(end==buffer-&gt;list-&gt;currentLength)</span><br><span class="line">        flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    buffer-&gt;<span class="built_in">deleteLines</span>(start, end);</span><br><span class="line">    <span class="keyword">if</span>(flag== <span class="literal">false</span>)</span><br><span class="line">        currentLine=start<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            currentLine=start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout&lt;&lt;currentLine&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdNull</span><span class="params">(<span class="type">int</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(line&lt;=<span class="number">0</span>||line&gt;buffer-&gt;list-&gt;currentLength)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Line number out of range&quot;</span>;</span><br><span class="line">    cout &lt;&lt; buffer-&gt;<span class="built_in">moveToLine</span>(line) &lt;&lt; endl;</span><br><span class="line">    currentLine=line;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdNumber</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;start)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Number range error&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;=<span class="number">0</span>||end&gt;buffer-&gt;list-&gt;currentLength)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Line number out of range&quot;</span>;</span><br><span class="line">    buffer-&gt;<span class="built_in">showLines</span>(start, end);</span><br><span class="line">    currentLine=end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdWrite</span><span class="params">(<span class="type">const</span> string &amp;filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    buffer-&gt;<span class="built_in">writeToFile</span>(filename);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::dispatchCmd</span><span class="params">(<span class="type">const</span> string &amp;cmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*if(cmd==&quot;r&quot;)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;returnCurrentLine()&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">if</span> (cmd == <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">cmdAppend</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cmd[<span class="number">0</span>] == <span class="string">&#x27;w&#x27;</span> &amp;&amp; cmd[<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> call cmdWrite with proper arguments</span></span><br><span class="line">        string a;</span><br><span class="line">        a=cmd.<span class="built_in">substr</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Filename not specified&quot;</span>;</span><br><span class="line">        <span class="built_in">cmdWrite</span>(a);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> handle special case &quot;1,$n&quot;.</span></span><br><span class="line">    <span class="keyword">if</span>(cmd==<span class="string">&quot;1,$n&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(buffer-&gt;list-&gt;currentLength==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Number range error&quot;</span>;</span><br><span class="line">        <span class="built_in">cmdAll</span>();</span><br><span class="line">        currentLine=buffer-&gt;list-&gt;currentLength;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;currentLine&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> start, end;</span><br><span class="line">    <span class="type">char</span> comma, type = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(cmd)</span></span>;</span><br><span class="line">    ss &gt;&gt; start;</span><br><span class="line">    <span class="keyword">if</span> (ss.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">        <span class="built_in">cmdNull</span>(start);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ss &gt;&gt; comma &gt;&gt; end &gt;&gt; type;</span><br><span class="line">    <span class="keyword">if</span> (ss.<span class="built_in">good</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">cmdNumber</span>(start, end);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">cmdDelete</span>(start, end);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cmd == <span class="string">&quot;i&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">cmdInsert</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;Bad/Unknown command&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Editor::cmdAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    buffer-&gt;list-&gt;<span class="built_in">traverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Editor.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Buffer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Buffer *buffer;</span><br><span class="line">  <span class="type">int</span> currentLine=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">dispatchCmd</span><span class="params">(<span class="type">const</span> string &amp;cmd)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdAppend</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdInsert</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdDelete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdNumber</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdWrite</span><span class="params">(<span class="type">const</span> string &amp;filename)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdNull</span><span class="params">(<span class="type">int</span> line)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">cmdAll</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">returnCurrentLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> currentLine;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Editor</span>();</span><br><span class="line">  ~<span class="built_in">Editor</span>();</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>下面是样例以及自己写的一些解题结构</p><p>样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cmd&gt; a  </span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1#include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3int main()</span><br><span class="line">4&#123;</span><br><span class="line">5&#125;</span><br><span class="line">cmd&gt; 3</span><br><span class="line">int main()</span><br><span class="line">cmd&gt; i</span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#includ</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1#include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3using namespace std;</span><br><span class="line">4</span><br><span class="line">5#includ</span><br><span class="line">6int main()</span><br><span class="line">7&#123;</span><br><span class="line">8&#125;</span><br><span class="line">cmd&gt; 4,5d</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1#include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3using namespace std;</span><br><span class="line">4int main()</span><br><span class="line">5&#123;</span><br><span class="line">6&#125;</span><br><span class="line">cmd&gt; 1,3c</span><br><span class="line">? Bad/Unknown command</span><br><span class="line">cmd&gt; 1,5n</span><br><span class="line">1#include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3using namespace std;</span><br><span class="line">4int main()</span><br><span class="line">5&#123;</span><br><span class="line">cmd&gt; a</span><br><span class="line">It&#x27;s input mode now. Quit with a line with a single dot(.)</span><br><span class="line">    cout &lt;&lt; &quot;Hello my editor&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">.</span><br><span class="line">cmd&gt; 1,$n</span><br><span class="line">1#include &lt;iostream&gt;</span><br><span class="line">2</span><br><span class="line">3using namespace std;</span><br><span class="line">4int main()</span><br><span class="line">5&#123;</span><br><span class="line">6    cout &lt;&lt; &quot;Hello my editor&quot; &lt;&lt; endl;</span><br><span class="line">7</span><br><span class="line">8    return 0;</span><br><span class="line">9&#125;</span><br><span class="line">cmd&gt; write</span><br><span class="line">? Bad/Unknown command</span><br><span class="line">cmd&gt; 1,999n</span><br><span class="line">? Line number out of range</span><br><span class="line">cmd&gt; 9,1n</span><br><span class="line">? Number range error</span><br><span class="line">cmd&gt; 4,2d</span><br><span class="line">? Delete range error</span><br><span class="line">cmd&gt; 2019</span><br><span class="line">? Line number out of range</span><br><span class="line">cmd&gt; w hello.cc</span><br><span class="line">111 byte(s) written</span><br><span class="line">cmd&gt; Q</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">class Editor &#123;</span><br><span class="line">private:</span><br><span class="line">  Buffer *buffer;</span><br><span class="line">  int currentLine=0;</span><br><span class="line"></span><br><span class="line">  void dispatchCmd(const string &amp;cmd);</span><br><span class="line">  void cmdAppend();</span><br><span class="line">  void cmdInsert();</span><br><span class="line">  void </span><br><span class="line">  cmdDelete(int start, int end);</span><br><span class="line">  void cmdNumber(int start, int end);</span><br><span class="line">  void cmdWrite(const string &amp;filename);</span><br><span class="line">  void cmdNull(int line);</span><br><span class="line">  void cmdAll();</span><br><span class="line">public:</span><br><span class="line">  Editor();</span><br><span class="line">  ~Editor();</span><br><span class="line">  void run();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Buffer &#123;</span><br><span class="line">private:</span><br><span class="line">    int currentLineNum;</span><br><span class="line">public:</span><br><span class="line">    Buffer();</span><br><span class="line">    ~Buffer();</span><br><span class="line">    edlist* list;</span><br><span class="line"></span><br><span class="line">    void writeToFile(const string &amp;filename) const;</span><br><span class="line"></span><br><span class="line">    const string &amp;moveToLine(int idx) const;</span><br><span class="line"></span><br><span class="line">    void showLines(int from, int to) const;</span><br><span class="line"></span><br><span class="line">    void deleteLines(int from, int to);//删除从from行到to行</span><br><span class="line">    void insertLine(const string &amp;text,int a);//在第a行之前插入text（即插入后的内容为第a行）</span><br><span class="line">    void appendLine(const string &amp;text,int a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class edlist</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void clear();</span><br><span class="line"></span><br><span class="line">    int length() const;</span><br><span class="line">    void insert(int i,const string &amp;x);//在第i行之前插入x（即插入后的内容为第i行）</span><br><span class="line">    void remove(int i);//删除第i行</span><br><span class="line">    int search(const string &amp;x);</span><br><span class="line">    string visit(int i);</span><br><span class="line">    void traverse()const;</span><br><span class="line">    edlist();</span><br><span class="line">    ~edlist()&#123;&#125;;</span><br><span class="line">    node* head;</span><br><span class="line">    int currentLength;</span><br><span class="line">    node* move(int i)const;//转移到第i-1行</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>本次分享到这啦，如果你有更好的解题方法，欢迎与作者交流。</p><p>作者vx:w2386181363</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>狂人日记新编</title>
      <link href="/2023/03/08/kuang-ren-ri-ji-xin-bian/"/>
      <url>/2023/03/08/kuang-ren-ri-ji-xin-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="狂人日记新编"><a href="#狂人日记新编" class="headerlink" title="狂人日记新编"></a>狂人日记新编</h1><p> 这是gigglewang在高三写的一篇略有批判性质的文章，有很大的模仿痕迹，但是自己也很怀念那个敢批判一切的自己。话不多说，文章奉上。</p><hr><p>百年前，或是有一叫周树人的先生，写过一篇狂人日记，其中之狂人实在可笑，今有一友，名曰敬轩者，也发了疯，对社会也少许怨意，概是躺平使其心无志，终而发了疯吧，如今其已痊愈，加入吾辈内卷之列中，时翻得发病间写的几篇文字，今看来已令人发笑矣。不妨发表，名其为《狂人日记新编》，仅搏众君一笑。</p><p>脊背发凉，我坠入深渊。</p><p>这世界，实在令人骨寒。</p><p>满眼都是些内卷的人们，他们对啥都有些卷意，房子，车子，票子，甚至是孩子。或是有一表兄，于重点之大学中，为一名曰绩点者欲狂焉，问其为何，支吾中言其能保其硕士之学位，更使其或导师之推荐出国交流者。奈何名额之有限，百余人方可选数十人者，而绩点之物可选拔一优劣，故众生为之一搏。</p><p>或有人吃饭睡觉甚至净身都在学知识者，将本为简单了解之基础知识平白无故钻成了一部巨著，导师小提一句，便要研究一整日。又有人收集天下之全书，彻夜苦读，却无所创新之收获，于无聊之竞争中耗费年华。</p><p>诸君均需一光明未来者，于我看来，实在可笑。</p><p>我满脸嘲笑着的向吾表兄袒露自我之心迹，略言之曰待吾长大之成人，万万不会与之作无意义且无聊之竞争，若无我走之道，不妨仅收吾之才华，于一小镇隐居，寻世间之小趣，亦可为一不二之选择。</p><p>却谁知，一言既出，吾兄之脸色剧白，似发一病名脑梗之类，颤唇挤出几字来，似乎是“吾弟大逆不道”之类云云。</p><p>或许，他告诉吾父母罢，从此以后，世人于我之眼色变矣。</p><p>先是父母兄弟齐聚吾小屋，耐心劝导我人需有大志也，内卷之道方为出入，此类人甚至言我为一时新词曰“躺平”者，甚是无奈。我一心以为自己之志向无果，内卷之路无用，半字没有听入。</p><p>这便炸了锅。</p><p>先是街坊邻居从此对我指手画脚，骂曰“无知青年”“无志子弟”之类，后报社以来探寻，甚至省里都发了些文章，大声指责我之过错，大炒奋斗之有用。我也生生成了反面教材之类。学校的学生见而躲避，像见了瘟神。其余之好友有一名“湖女”者，甚至唾弃之。</p><p>吾何过也！</p><p>父亲终是体面之人，岂能容忍其子成“躺平”之辈耶？次日将我关于家中，不叫我上学校去，请一先生来吾家，此人为内卷之名流，似于海外有“内卷王”之名者，如今于一律所苦读法律，望为内卷之同仁辩护。</p><p>他的模样，实在搞笑。</p><p>约有五厘米厚的眼镜片照的我眼瞎，他用一口标准的普通语开导我，类似于躺平可耻云云。我的内心早已压抑许久。突然爆发之怒火喷其脸面：“这是吾之抉择，躺平为吾念中之隐此社会者，于你何干？”</p><p>他愣了几秒钟罢，退了两步，脸上终没有颜色，又大骂吾曰：“孺子不可教也，犯神经病耶？不思进取，汝等愧为吾辈之青年，汝疯矣！”</p><p>吾疯欤？抑或众人之头脑皆昏欤？</p><p>看周围之少年，青年，甚至之婴儿于襁褓中者，均于以我之眼无意义之竞争中，而吾国之诺奖却少之又少。</p><p>看小辈之眼，听汝“我欲卷出我之天地”之狂言，我心寒矣！</p><p>未被所谓主流价值所洗脑者，抑或有之？</p><p>于何地可发现其人？</p><p>或许是一小孩耶？</p><p>他或马上被内卷之漩涡席卷。</p><p>他在哪里？</p><p>救救孩子……</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SEP课程代码分享（2023SPRING）-lab1</title>
      <link href="/2023/03/07/sep-ke-cheng-dai-ma-fen-xiang-2023spring-lab1/"/>
      <url>/2023/03/07/sep-ke-cheng-dai-ma-fen-xiang-2023spring-lab1/</url>
      
        <content type="html"><![CDATA[<p>写在前面：</p><p>为了小学期不上课（bushi），所有上海交通大学软件工程的同学都要在大一春学期进行一学分的软件基础实践学习，平时的主要内容就是写lab。</p><p>不得不说，写lab耗费了我大量的时间，平均一个lab是3天工作日的空余时间。但是也不得不承认，一次次lab的磨练给予了自己代码能力的提升。此系列用于记录保存自己写的所有lab内容，新lab的代码会在截止之后上传（当然得我有空的情况下），不过……千万不要抄袭哟~（自恋）</p><hr><p>下面是lab1的具体要求：</p><h1 id="Lab1-X老师的小程序"><a href="#Lab1-X老师的小程序" class="headerlink" title="Lab1: X老师的小程序"></a>Lab1: X老师的小程序</h1><p>[toc]</p><p>X老师需要一个统计和计算学生成绩的小程序，以协助他录入学生成绩、计算课程均分以及查看学生的学分绩。<br>学生名单、课程列表和学生的选课情况已经存在于文本文件中，小程序需要从这些文件中读出内容并建立相应的对象，以完成后续的成绩录入和计算工作。</p><p>学生名单存在于文件 <code>Students.txt</code> 中，其中学生分为本科生（Undergraduate）和研究生（Graduate），分别以字母 <code>U</code> 和 <code>G</code> 表示，文件格式如下（<code>#</code> 开头的是注释）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># id;name;year;degree</span><br><span class="line">F180370001;Apple;2019;U</span><br><span class="line">B180370010;Boy;2018;G</span><br></pre></td></tr></table></figure><p>课程列表和学生选课情况存在于文件 <code>Classes.txt</code> 中，文件每一段表示一个课程和选择该课程的学生学号列表，格式如下（<code>#</code> 开头的是注释）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Class name and points followed by student ids</span><br><span class="line">Class:ICS</span><br><span class="line">Points:5</span><br><span class="line">F180370001</span><br><span class="line">F180370002</span><br><span class="line"></span><br><span class="line">Class:English</span><br><span class="line">Points:3</span><br><span class="line">F180370003</span><br><span class="line">B180370001</span><br><span class="line"></span><br><span class="line">Class:ADS</span><br><span class="line">Points:2</span><br><span class="line">B180370001</span><br><span class="line">B180370002</span><br></pre></td></tr></table></figure><p>小程序需要实现的功能主要有以下三个：</p><ol><li>记录成绩：记录某一门课程的一名学生的成绩，为了简便该程序不要求将成绩写入文件，只需存储在内存中即可。</li><li>计算课程平均分：在成绩录入完成以后，选择一门课程并计算出该课程所有选课学生的平均分。</li><li>计算学生学分绩：在成绩录入完成以后，选择一名学生并计算 ta 的学分绩。其中本科生和研究生的学分绩计算方法不同，本科生的总学分绩是 5.0，计算方法是每门课程的分数除以 20 然后按照学分数量加权平均；研究生的总学分绩是 4.0，计算方法是先分档次记分：90～100分 =&gt; 4.0，80～89分 =&gt; 3.5，70～79 =&gt; 3.0，60～69 =&gt; 2.5，60以下 =&gt; 2.0，然后再按照学分数量加权平均。</li></ol><p>小程序通过命令行与用户进行交互，用户通过输入一些特定的命令、课程名、学号和成绩来完成操作流程，流程图如下：</p><p><img src="D:\test\lab1\lab1\spec\sep-lab1-liucheng.png" alt="流程图"></p><p>在系统设计中，类的关系要求如下：</p><p><img src="D:\test\lab1\lab1\spec\sep-lab1-class.png" alt="类图"></p><p>其中 <code>getGrade</code> 函数是 <code>Student</code> 类的<strong>纯虚函数</strong>，它的子类 <code>Undergraduate</code> 和 <code>Graduate</code> 继承后具体实现了 <code>getGrade</code> 函数。（图例可参考：<a href="https://en.wikipedia.org/wiki/Class_diagram）">https://en.wikipedia.org/wiki/Class_diagram）</a></p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ol><li><p>小程序的部分代码已经给出，现在需要你将其补全（即解决所给代码中所有的 <code>TODO</code>）: </p><ol><li>从 <code>Classes.txt</code> 文件中读出课程列表和学生选课情况，将其创建成对应的对象；</li><li>实现 <code>Student</code> 类、<code>Undergraduate</code> 类和 <code>Graduate</code> 类；</li><li>完成计算课程平均分功能、记录成绩功能和计算学生学分绩功能。</li></ol></li><li>所给代码中 <code>StudentWrapper</code> 类的构造函数是有错误的，请改正这个错误<strong>详细</strong>说明原因（创建一个新的 <code>BugReport.txt</code> 文本文件进行说明）。</li><li>处理程序异常输入，例如输入不存在的课程名、学号或者无效的分数时程序不应该崩溃（提示：考虑使用<code>try...catch</code>）。</li></ol><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>注意，作业的完成包括两部分：</p><ol><li>完成作业后，在<strong>抽查</strong>名单上的同学需要在上机课时找到助教进行功能演示，表明程序可以运行，且完成了规定的功能；</li><li><strong>所有同学</strong>都需要提交项目代码到 Canvas 平台。</li></ol><p>提交时请将你完成的项目代码（请不要包含生成的中间文件和可执行文件）和说明文件 <code>BugReport.txt</code> 打包（格式为 7z）命名为 <code>lab1-XXX.7z</code> 上传到 Canvas 中，其中 <code>XXX</code> 为你的学号。</p><p>解压后你的项目目录结构大概是下面这样，可以有一些小的区别，比如多一些你自己使用的小文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lab1</span><br><span class="line">├── Class.cc</span><br><span class="line">├── Class.h</span><br><span class="line">├── Classes.txt</span><br><span class="line">├── Student.cc</span><br><span class="line">├── Student.h</span><br><span class="line">├── Students.txt</span><br><span class="line">├── main.cc</span><br><span class="line">├── BugReport.txt</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── spec</span><br><span class="line">    ├── lab1.md</span><br><span class="line">    ├── lab1.pdf</span><br><span class="line">    ├── sep-lab1-class.png</span><br><span class="line">    ├── sep-lab1-liucheng.png</span><br><span class="line">    └── sep-lab1-clion.png</span><br></pre></td></tr></table></figure><blockquote><p>由于 zip 格式有中文乱码问题，rar 的压缩工具为收费软件，请使用 7z 格式进行打包和压缩，关于 7z 压缩的工具：</p><ul><li>Windows 可使用 <a href="https://www.7-zip.org">https://www.7-zip.org</a> 或其他支持7z格式的压缩工具</li><li>MacOS 可使用 Keka （<a href="https://www.keka.io/）">https://www.keka.io/）</a> 等</li><li>Linux 可使用 p7zip （<code>sudo apt install p7zip-full</code>）等</li></ul></blockquote><h2 id="关于-Clion-的一些使用提示"><a href="#关于-Clion-的一些使用提示" class="headerlink" title="关于 Clion 的一些使用提示"></a>关于 Clion 的一些使用提示</h2><ol><li><p>在解压缩之后，你可以直接使用 Clion 打开 <code>lab1</code> 文件夹，建议将 <code>lab1</code> 文件夹放在全英目录下，否则可能会出现本地编译不通过的情况。</p></li><li><p>使用 Clion 打开后会出现如下所示的配置确认，直接点 OK 即可。<strong>注意：请不要修改 CMakeLists.txt 文件中的内容！</strong></p><p><img src="D:\test\lab1\lab1\spec\sep-lab1-clion.png" alt="Clion 配置确认"></p><p>如果没有自己跳出可以自行右击 <code>lab1</code> 文件夹选择 <code>Reload Cmake Project</code> 来生成 <code>cmake-build-debug</code>。 </p></li><li><p>请注意<strong>不要</strong>提交本地的 <code>cmake-build-debug</code> 文件夹。</p></li><li><p>之后，可以通过点击运行和调试按钮来尝试运行项目。注意，第一次运行项目并不会编译通过，因为所给代码中 <code>StudentWrapper</code> 类的构造函数是有错误的，请自己完成修改。</p></li><li><p>请注意程序中文件的路径问题。由于 Clion 会将可执行文件在 <code>cmake-build-debug</code> 文件夹中生成，程序中需要引用的输入文件在上一层目录，因此输入文件名为 <code>../xxx.txt</code> 。如果用其他集成终端可能会直接将可执行文件在 <code>lab1</code> 文件夹中生成，因此输入文件名为 <code>./xxx.txt</code> 。这里统一为 <code>./xxx.txt</code> ，使用 Clion 的同学在提交时需要将 <code>../xxx.txt</code> 改为  <code>./xxx.txt</code>。</p></li></ol><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>为执行统⼀的测试脚本，现统⼀规定SEP-2023-lab1的输出格式。对于所有计算数据输出均保留两位小数<br>具体格式如下：<strong>（请注意空格和换行）</strong></p><p><strong>成绩计算</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printAvgScore: &quot;The average score is: %.2f\n&quot;</span><br><span class="line">printGpa: &quot;GPA = %.2f\n&quot;</span><br></pre></td></tr></table></figure><p><strong>异常处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">成绩格式错误，命令行输出：&quot;Wrong score!\n&quot;</span><br><span class="line">课程名称错误，命令行输出：&quot;No match class!\n&quot;</span><br><span class="line">学生ID输⼊错误，命令行输出： &quot;No match student!\n&quot;</span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><p>lab1文件夹中已经给出了一个测试用例的输入（spec/input0.txt）和输出（spec/output0.txt），在你认为完成后请先自行在本地进行测试，方便定位自己的问题。（注意敲对输入！仔细对比输出！）</p><h3 id="1-关于测试结果的说明"><a href="#1-关于测试结果的说明" class="headerlink" title="1. 关于测试结果的说明"></a>1. 关于测试结果的说明</h3><h4 id="1-1-xxxxxx-line-xx"><a href="#1-1-xxxxxx-line-xx" class="headerlink" title="1.1 xxxxxx(line xx)"></a>1.1 xxxxxx(line xx)</h4><p>给出的错误信息（line xx）意思是在一个测试里输出到第几行的时候出错了，因为一个测试里会要求不止一条输出。比如line 2说明输出的0和1行内容是对的，在第2行错了。</p><p>line xx表示的是助教这里的答案的行数，不是你们程序运行结果的行数。</p><h4 id="1-2-错误处理"><a href="#1-2-错误处理" class="headerlink" title="1.2 错误处理"></a>1.2 错误处理</h4><p>“Wrong score!”不匹配</p><ul><li>Test #%d: Fail. Exception handle(score) error</li></ul><p>“No match class!”不匹配</p><ul><li>Test #%d: Fail. Exception handle(class) error</li></ul><p>“No match student!”不匹配</p><ul><li>Test #%d: Fail. Exception handle(student) error</li></ul><h4 id="1-3-数值计算错误"><a href="#1-3-数值计算错误" class="headerlink" title="1.3 数值计算错误"></a>1.3 数值计算错误</h4><p>含有”The format of”的信息表示输出格式肯定不对，没有该信息的是计算错误或格式错误（保留小数）。</p><h4 id="1-4-其他"><a href="#1-4-其他" class="headerlink" title="1.4 其他"></a>1.4 其他</h4><p>“Answer is too short”表示输出的结果进过匹配后发现答案缺失。</p><p><strong>“Compile error…No such file…”表示作业提交格式没有按照说明提交（含lab1文件夹且不要修改名称）。</strong></p><h3 id="2-测试结果可能的错误原因"><a href="#2-测试结果可能的错误原因" class="headerlink" title="2. 测试结果可能的错误原因"></a>2. 测试结果可能的错误原因</h3><h4 id="2-1-程序本身计算错误"><a href="#2-1-程序本身计算错误" class="headerlink" title="2.1 程序本身计算错误"></a>2.1 程序本身计算错误</h4><h4 id="2-2-多余输出信息"><a href="#2-2-多余输出信息" class="headerlink" title="2.2 多余输出信息"></a>2.2 多余输出信息</h4><p>这里的多余输出信息不是说不能输出辅助信息，而是在给出的《lab1.pdf》文档中规定的输出不是以换行结束的。也就是说这一行输出的末尾要和说明匹配，不能有多余的信息赘述在这行的后面。（这行的前面有多余信息是不影响的）。</p><p>正确示例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdlfjs111kdj000fjlsdkf--jljjs....some_info_. ....sjfldsjkfGPA = <span class="number">96</span>.<span class="number">00</span></span><br><span class="line">GPA = <span class="number">96</span>.<span class="number">00</span></span><br></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdlfjs111kdj000fjlsdkf--jljjs....some_info_. ....sjfldsjkfGPA = <span class="number">96</span>.<span class="number">00</span>please input ...</span><br></pre></td></tr></table></figure><h4 id="2-3-多余的错误处理"><a href="#2-3-多余的错误处理" class="headerlink" title="2.3 多余的错误处理"></a>2.3 多余的错误处理</h4><p>这里的多余意思是，把正确的输入也通过文档中的三种错误信息格式进行输出。</p><h3 id="3-什么时候测试"><a href="#3-什么时候测试" class="headerlink" title="3. 什么时候测试"></a>3. 什么时候测试</h3><p><strong>并不是你提交了就立刻有结果的！！！</strong></p><p>测试结果只有我这里跑了测试脚本才会上传到课程网站。</p><p>隔30分钟测试一次。</p><h3 id="4-我自己跑的是通过的，为什么助教那里的没有过"><a href="#4-我自己跑的是通过的，为什么助教那里的没有过" class="headerlink" title="4. 我自己跑的是通过的，为什么助教那里的没有过"></a>4. 我自己跑的是通过的，为什么助教那里的没有过</h3><p>有一些同学在问助教测试为什么过不了，测试数据是不会公开的。测试用例有一部分是非常基础的测试，不包含错误处理，大家可以先考虑过正常流程。这里提示一下，正常流程是<strong>【输入课程和学生成绩（不止一个课程，一个课程也不止一个学生），查询课程平均分（不止一个），查询学生GPA（不止一个）】</strong></p><p>助教这里也不会告诉你为什么错了，毕竟一个一个人查助教一个人也没有精力做到，可以确定的是如果程序都正确肯定得分是100，不用怀疑测试脚本的问题。</p><h4 id="额外提示"><a href="#额外提示" class="headerlink" title="额外提示"></a>额外提示</h4><p><strong>测试用例1-4、7最终需要的结果是不含错误处理信息的</strong></p><p><strong>一定一定要注意输出格式！！！每一个字母每一个空格每一个空行都要一样！！！</strong></p><p><strong>测试判断的流程是：如果一行输出含有《lab1.pdf》文件中要求的任意一种输出语句，那么会判定这一行为一行答案，与助教的标准答案的一行进行匹配。所以给同学们的错误提示，不一定就是与之相关的问题。比如说，“GPA is wrong.”这个提示不一定是GPA计算错误，也可能是你的输出含有GPA = xx，而助教的答案这一行是错误处理的“Wrong score!”之类的信息。再比如说，“Exception handle(class) error.”这个提示不一定是课程异常处理出错，非常可能是因为你的输出含有No match class!，而助教的答案这一行不是错误信息，而是gpa或者score等其他信息。</strong></p><h3 id="5-其他问题汇总"><a href="#5-其他问题汇总" class="headerlink" title="5. 其他问题汇总"></a>5. 其他问题汇总</h3><h4 id="5-1-得分范围的切分"><a href="#5-1-得分范围的切分" class="headerlink" title="5.1 得分范围的切分"></a>5.1 得分范围的切分</h4><p>不存在89-90这种范围内的奇怪测试数据，可以不考虑</p><h4 id="5-2-成绩输入错误的下一步，回到输入学生ID这一步"><a href="#5-2-成绩输入错误的下一步，回到输入学生ID这一步" class="headerlink" title="5.2 成绩输入错误的下一步，回到输入学生ID这一步"></a>5.2 成绩输入错误的下一步，回到输入学生ID这一步</h4><h4 id="5-3-查询均分出现非法输入返回输入查询均分这一步；查询绩点出现非法输入返回输入查询绩点这一步（都是同一步不断循环）"><a href="#5-3-查询均分出现非法输入返回输入查询均分这一步；查询绩点出现非法输入返回输入查询绩点这一步（都是同一步不断循环）" class="headerlink" title="5.3 查询均分出现非法输入返回输入查询均分这一步；查询绩点出现非法输入返回输入查询绩点这一步（都是同一步不断循环）"></a>5.3 查询均分出现非法输入返回输入查询均分这一步；查询绩点出现非法输入返回输入查询绩点这一步（都是同一步不断循环）</h4><h4 id="5-4-整个输入成绩过程出现要求输入课程名时，输入非法课程名返回输入课程名这一步"><a href="#5-4-整个输入成绩过程出现要求输入课程名时，输入非法课程名返回输入课程名这一步" class="headerlink" title="5.4 整个输入成绩过程出现要求输入课程名时，输入非法课程名返回输入课程名这一步"></a>5.4 整个输入成绩过程出现要求输入课程名时，输入非法课程名返回输入课程名这一步</h4><h4 id="5-5-我的程序为什么读文件都读不成功？"><a href="#5-5-我的程序为什么读文件都读不成功？" class="headerlink" title="5.5 我的程序为什么读文件都读不成功？"></a>5.5 我的程序为什么读文件都读不成功？</h4><p>请参考《lab1.pdf》的使用提示。</p><h4 id="5-6-使用mac电脑的同学们注意：如果遇到mac电脑运行不过的程序在windows上能过-输入的字符串和存储的字符串总是不相等？"><a href="#5-6-使用mac电脑的同学们注意：如果遇到mac电脑运行不过的程序在windows上能过-输入的字符串和存储的字符串总是不相等？" class="headerlink" title="5.6 使用mac电脑的同学们注意：如果遇到mac电脑运行不过的程序在windows上能过/输入的字符串和存储的字符串总是不相等？"></a>5.6 使用mac电脑的同学们注意：如果遇到mac电脑运行不过的程序在windows上能过/输入的字符串和存储的字符串总是不相等？</h4><p>注意对于输入文件处理的时候，字符串需要把macos系统默认的换行符’\r’做丢弃处理</p><hr><p><strong><em>要求结束，下面奉上自己写的代码（可能不够完美，也欢迎大家提供意见）</em></strong></p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class.cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Class.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Class::addStudent</span><span class="params">(<span class="type">const</span> Student &amp;st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">StudentWrapper <span class="title">sw</span><span class="params">(st.id, st)</span></span>;</span><br><span class="line">    students.<span class="built_in">push_back</span>(sw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">StudentWrapper &amp;<span class="title">Class::getStudentWrapper</span><span class="params">(<span class="type">const</span> std::string &amp;studentId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (std::vector&lt;StudentWrapper&gt;::iterator it = students.<span class="built_in">begin</span>();</span><br><span class="line">             it != students.<span class="built_in">end</span>();</span><br><span class="line">             ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;id == studentId)</span><br><span class="line">                <span class="keyword">return</span> *it;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">int</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//std::cout&lt;&lt;&quot;No match student!&quot;&lt;&lt;std::endl;</span></span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No match student!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Class::getAvgScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement getAvgScore.</span></span><br><span class="line">    <span class="type">double</span> allScore;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(std::vector&lt;StudentWrapper&gt;::iterator it = students.<span class="built_in">begin</span>();</span><br><span class="line">        it != students.<span class="built_in">end</span>();</span><br><span class="line">        ++it) &#123;</span><br><span class="line">        num++;</span><br><span class="line">        allScore+=it-&gt;<span class="built_in">getScore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> averageScore=allScore/num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averageScore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Class.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CLASS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLASS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::vector&lt;StudentWrapper&gt; students;</span><br><span class="line">    <span class="type">const</span> std::string name;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> point;</span><br><span class="line">    <span class="built_in">Class</span>(<span class="type">const</span> std::string &amp;name, <span class="type">const</span> <span class="type">int</span> point)</span><br><span class="line">        : <span class="built_in">name</span>(name), <span class="built_in">point</span>(point) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">addStudent</span><span class="params">(<span class="type">const</span> Student &amp;st)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">StudentWrapper &amp;<span class="title">getStudentWrapper</span><span class="params">(<span class="type">const</span> std::string &amp;studentId)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getAvgScore</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CLASS_H_</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//Class.txt</span><br><span class="line"># Class: 课程名</span><br><span class="line"># Points: 学分</span><br><span class="line">Class:ICS</span><br><span class="line">Points:5</span><br><span class="line">F180370001</span><br><span class="line">F180370002</span><br><span class="line">F180370003</span><br><span class="line">F180370004</span><br><span class="line">F180370005</span><br><span class="line"></span><br><span class="line">Class:English</span><br><span class="line">Points:3</span><br><span class="line">F180370001</span><br><span class="line">F180370002</span><br><span class="line">F180370003</span><br><span class="line">F180370004</span><br><span class="line">F180370005</span><br><span class="line">B180370001</span><br><span class="line">B180370002</span><br><span class="line">B180370003</span><br><span class="line"></span><br><span class="line">Class:ADS</span><br><span class="line">Points:2</span><br><span class="line">B180370001</span><br><span class="line">B180370002</span><br><span class="line">B180370003</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Class.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iomanip&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppX</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;Student *&gt; studentVec;</span><br><span class="line">    vector&lt;Class *&gt; classVec;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loadFiles</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">inputScore</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printAvgScore</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printGpa</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AppX</span>();</span><br><span class="line">    ~<span class="built_in">AppX</span>();</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AppX::~<span class="built_in">AppX</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// You can use the traditional loop, which is more clear.</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Class *&gt;::iterator it = classVec.<span class="built_in">begin</span>();</span><br><span class="line">         it != classVec.<span class="built_in">end</span>();</span><br><span class="line">         ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*it) <span class="built_in">delete</span> (*it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// You can use modern and simpler loops only if you know what it is doing.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;s: studentVec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s) <span class="built_in">delete</span> (s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppX::<span class="built_in">AppX</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">loadFiles</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppX::loadFiles</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="type">size_t</span> pos1, pos2;</span><br><span class="line">    vector&lt;string&gt; bufv;</span><br><span class="line">    Student *st = <span class="literal">nullptr</span>;</span><br><span class="line">    string clsname;</span><br><span class="line">    <span class="type">int</span> point;</span><br><span class="line">    Class *cl = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open a file as a input stream.</span></span><br><span class="line">    <span class="function">ifstream <span class="title">stfile</span><span class="params">(<span class="string">&quot;../Students.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(stfile, line)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (line.<span class="built_in">empty</span>()) <span class="comment">// It&#x27;s an empty line.</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>) <span class="comment">// It&#x27;s a comment line.</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The bufv vector stores each columnes in the line.</span></span><br><span class="line">        bufv.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="comment">// Split the line into columes.</span></span><br><span class="line">        <span class="comment">//   pos1: begining the the column.</span></span><br><span class="line">        <span class="comment">//   pos2: end of the column.</span></span><br><span class="line">        pos1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            pos2 = line.<span class="built_in">find</span>(<span class="string">&#x27;;&#x27;</span>, pos1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos2 == string::npos) &#123; <span class="comment">// No more columns.</span></span><br><span class="line">                <span class="comment">// Save the last column (pos1 ~ eol).</span></span><br><span class="line">                bufv.<span class="built_in">push_back</span>(line.<span class="built_in">substr</span>(pos1, string::npos));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Save the column (pos1 ~ pos2).</span></span><br><span class="line">                bufv.<span class="built_in">push_back</span>(line.<span class="built_in">substr</span>(pos1, pos2 - pos1));</span><br><span class="line">            &#125;</span><br><span class="line">            pos1 = pos2 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> uncomment next lines after implementing class Undergraduate</span></span><br><span class="line">        <span class="comment">// and Graduate.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bufv[<span class="number">3</span>] == <span class="string">&quot;U&quot;</span>)</span><br><span class="line">            st = <span class="keyword">new</span> <span class="built_in">Undergraduate</span>(bufv[<span class="number">0</span>], bufv[<span class="number">1</span>], bufv[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            st = <span class="keyword">new</span> <span class="built_in">Graduate</span>(bufv[<span class="number">0</span>], bufv[<span class="number">1</span>], bufv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        studentVec.<span class="built_in">push_back</span>(st);</span><br><span class="line">    &#125;</span><br><span class="line">    stfile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> load data from ./Classes.txt and push objects to the vector.</span></span><br><span class="line">    <span class="function">ifstream <span class="title">afile</span><span class="params">(<span class="string">&quot;../Classes.txt&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(afile,line))&#123;</span><br><span class="line">        <span class="keyword">if</span>(line.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(line[<span class="number">0</span>]==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//bufv.clear();</span></span><br><span class="line">        <span class="keyword">if</span>(line[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>&amp;&amp;line[<span class="number">1</span>]==<span class="string">&#x27;l&#x27;</span>&amp;&amp;line[<span class="number">2</span>]==<span class="string">&#x27;a&#x27;</span>&amp;&amp;line[<span class="number">3</span>]==<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            clsname=line.<span class="built_in">substr</span>(<span class="number">6</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(line.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">6</span>)==<span class="string">&quot;Points&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            point=line[<span class="number">7</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            cl=<span class="keyword">new</span> <span class="built_in">Class</span>(clsname,point);</span><br><span class="line">            <span class="comment">//此处还应该录入学生选课情况。</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">getline</span>(afile,line))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(line.<span class="built_in">empty</span>())</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    string tmp=line.<span class="built_in">substr</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(std::vector&lt;Student *&gt;::iterator it=studentVec.<span class="built_in">begin</span>();it!=studentVec.<span class="built_in">end</span>();it++)</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="comment">//                        cout&lt;&lt;(*it)-&gt;id&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(tmp==(*it)-&gt;id)&#123;</span><br><span class="line">                            <span class="type">const</span> Student* tmpOfStudent=*it;</span><br><span class="line">                            cl-&gt;<span class="built_in">addStudent</span>(*tmpOfStudent);</span><br><span class="line">                            (*it)-&gt;<span class="built_in">addClass</span>(cl);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            classVec.<span class="built_in">push_back</span>(cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    afile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*ifstream bfile(&quot;../Classes.txt&quot;);</span></span><br><span class="line"><span class="comment">    while(getline(bfile,line))&#123;</span></span><br><span class="line"><span class="comment">        Class* tmpClass;</span></span><br><span class="line"><span class="comment">        if(line.empty())</span></span><br><span class="line"><span class="comment">            continue;</span></span><br><span class="line"><span class="comment">        if(line[0]==&#x27;#&#x27;)</span></span><br><span class="line"><span class="comment">            continue;</span></span><br><span class="line"><span class="comment">        if(line[0]==&#x27;C&#x27;&amp;&amp;line[1]==&#x27;l&#x27;&amp;&amp;line[2]==&#x27;a&#x27;&amp;&amp;line[3]==&#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            clsname=line.substr(6);</span></span><br><span class="line"><span class="comment">            for(std::vector&lt;Class*&gt;::iterator it=classVec.begin();it!=classVec.end();it++)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(clsname==(*it)-&gt;name)</span></span><br><span class="line"><span class="comment">                    tmpClass=*it;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            while (getline(bfile,line))</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                if(line.empty())</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                if(line[0]==&#x27;P&#x27;&amp;&amp;line[1]==&#x27;o&#x27;)</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                else</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                    string tmpName=line.substr(0);</span></span><br><span class="line"><span class="comment">                    for(std::vector&lt;Student *&gt;::iterator it=studentVec.begin();it!=studentVec.end();++it)</span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                        if(tmpName==(*it)-&gt;name)</span></span><br><span class="line"><span class="comment">                            (*it)-&gt;addClass(tmpClass);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    bfile.close();*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hint: how is student information read?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppX::inputScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement inputScore.</span></span><br><span class="line">    <span class="comment">// Hint: Take a look at printAvgScore().</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        string sbuf;</span><br><span class="line">        Class *cl;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please input the class name (or input q to quit): &quot;</span>;</span><br><span class="line">        cin &gt;&gt; sbuf;</span><br><span class="line">        <span class="keyword">if</span> (sbuf == <span class="string">&quot;q&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        cl = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;Class *&gt;::iterator it = classVec.<span class="built_in">begin</span>();</span><br><span class="line">             it != classVec.<span class="built_in">end</span>();</span><br><span class="line">             ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*it)-&gt;name == sbuf) &#123;</span><br><span class="line">                cl = *it;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cl == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No match class!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            string inputString;</span><br><span class="line">            <span class="comment">//StudentWrapper* temp;</span></span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Please input the student number (or input q to quit): &quot;</span>;</span><br><span class="line">            cin &gt;&gt; inputString;</span><br><span class="line">            <span class="keyword">if</span> (inputString == <span class="string">&quot;q&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (vector&lt;StudentWrapper&gt;::iterator it = cl-&gt;students.<span class="built_in">begin</span>(); it != cl-&gt;students.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it-&gt;id == inputString) &#123;</span><br><span class="line">                    cout&lt;&lt;it-&gt;<span class="built_in">toString</span>();</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;please input the score: &quot;</span>;</span><br><span class="line">                    <span class="type">double</span> inputScore;</span><br><span class="line">                    string stringA;</span><br><span class="line">                    cin&gt;&gt;stringA;</span><br><span class="line">                    <span class="keyword">if</span>(stringA==<span class="string">&quot;q&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="type">bool</span> flag1=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(stringA[<span class="number">1</span>]==<span class="string">&#x27;\0&#x27;</span>||stringA[<span class="number">2</span>]==<span class="string">&#x27;\0&#x27;</span>||stringA[<span class="number">3</span>]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                        flag1=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span>(flag1== <span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(stringA[<span class="number">1</span>]==<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>&gt;=<span class="number">0</span>&amp;&amp;stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>&lt;=<span class="number">9</span>)</span><br><span class="line">                            inputScore=stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(stringA[<span class="number">2</span>]==<span class="string">&#x27;\0&#x27;</span>&amp;&amp;stringA[<span class="number">1</span>]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>((stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>&gt;=<span class="number">0</span>&amp;&amp;stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>&lt;=<span class="number">9</span>)&amp;&amp;(stringA[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>&gt;=<span class="number">0</span>&amp;&amp;stringA[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>&lt;=<span class="number">9</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            inputScore=(stringA[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span>+stringA[<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(stringA[<span class="number">3</span>]==<span class="string">&#x27;\0&#x27;</span>&amp;&amp;stringA[<span class="number">2</span>]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(stringA==<span class="string">&quot;100&quot;</span>)</span><br><span class="line">                            inputScore=<span class="number">100</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                            flag=<span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(inputScore&lt;<span class="number">0</span>||inputScore&gt;<span class="number">100</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;</span><br><span class="line">                        flag=<span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    it-&gt;<span class="built_in">setScore</span>(inputScore);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No match student!&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppX::printAvgScore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string sbuf;</span><br><span class="line">    Class *cl;</span><br><span class="line">    <span class="type">double</span> avg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please input the class name (or input q to quit): &quot;</span>;</span><br><span class="line">        cin &gt;&gt; sbuf;</span><br><span class="line">        <span class="keyword">if</span> (sbuf == <span class="string">&quot;q&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        cl = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;Class *&gt;::iterator it = classVec.<span class="built_in">begin</span>();</span><br><span class="line">             it != classVec.<span class="built_in">end</span>();</span><br><span class="line">             ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((*it)-&gt;name == sbuf) &#123;</span><br><span class="line">                cl = *it;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cl == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No match class!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        avg = cl-&gt;<span class="built_in">getAvgScore</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The average score is: &quot;</span> ;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt; avg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppX::printGpa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement printGpa.</span></span><br><span class="line">    <span class="comment">// Hint: Take a look at printAvgScore().</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        string inputString;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Please input the student number (or input q to quit): &quot;</span>;</span><br><span class="line">        cin&gt;&gt;inputString;</span><br><span class="line">        <span class="keyword">if</span>(inputString==<span class="string">&quot;q&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        Student* cl;</span><br><span class="line">        cl= <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;Student *&gt;::iterator it =studentVec.<span class="built_in">begin</span>();it!=studentVec.<span class="built_in">end</span>();++it)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((*it)-&gt;id==inputString)</span><br><span class="line">            &#123;</span><br><span class="line">                cl=*it;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cl== <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;No match student!&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> Grade=cl-&gt;<span class="built_in">getGrade</span>();</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;GPA = &quot;</span>;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;Grade&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">AppX::run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> cmd;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Command menu:\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;\ti: Input score\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;\ta: Compute average score of a class\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;\tg: Compute grade of a student\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;\tq: Quit\n&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;Please input the command: &quot;</span>;</span><br><span class="line">        cin &gt;&gt; cmd;</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">inputScore</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printAvgScore</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printGpa</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Invalid command!\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AppX app;</span><br><span class="line">    <span class="keyword">return</span> app.<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student.cc</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Class.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">Student::toString</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> uncomment the following code after implementing class Student.</span></span><br><span class="line"></span><br><span class="line">    std::ostringstream oss;</span><br><span class="line">    oss &lt;&lt; <span class="string">&quot;Student Information:&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n\tid: &quot;</span> &lt;&lt; id</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n\tname: &quot;</span> &lt;&lt; name</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n\tenrollment year: &quot;</span> &lt;&lt; year</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\n\tdegree: &quot;</span> &lt;&lt; (degree == graduate ? <span class="string">&quot;graduate&quot;</span> : <span class="string">&quot;undergraduate&quot;</span>)</span><br><span class="line">        &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> oss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement functions which are declared in Student.h.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::addClass</span><span class="params">(Class *c)</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    Class *target;</span><br><span class="line">    <span class="comment">/* for(std::vector&lt;Class*&gt;::iterator it=classes.begin();it!=classes.end();++it)</span></span><br><span class="line"><span class="comment">     &#123;</span></span><br><span class="line"><span class="comment">         flag=true;</span></span><br><span class="line"><span class="comment">         if((*it)-&gt;name==(*c).name)</span></span><br><span class="line"><span class="comment">         &#123;</span></span><br><span class="line"><span class="comment">             flag=false;</span></span><br><span class="line"><span class="comment">             target=*it;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         if(flag==true)</span></span><br><span class="line"><span class="comment">             throw &quot;No matching class!&quot;;*/</span></span><br><span class="line">    classes.<span class="built_in">push_back</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Undergraduate::getGrade</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> allScore=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> allPoint=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(std::vector&lt;Class *&gt;::iterator it=classes.<span class="built_in">begin</span>();it!=classes.<span class="built_in">end</span>();++it)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> score=(*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()/<span class="number">20</span>;</span><br><span class="line">            allPoint+=(*it)-&gt;point;</span><br><span class="line">            allScore+=(*it)-&gt;point*score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> Grade=allScore/allPoint;</span><br><span class="line">        <span class="keyword">return</span> Grade;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Graduate::getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> allPoint=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> allScore=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    <span class="keyword">for</span>(std::vector&lt;Class *&gt;::iterator it=classes.<span class="built_in">begin</span>();it!=classes.<span class="built_in">end</span>();++it)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&lt;=<span class="number">100</span>&amp;&amp;(*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&gt;=<span class="number">90</span>)</span><br><span class="line">            score=<span class="number">4.0</span>;</span><br><span class="line">        <span class="keyword">if</span>((*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&lt;=<span class="number">89</span>&amp;&amp;(*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&gt;=<span class="number">80</span>)</span><br><span class="line">            score=<span class="number">3.5</span>;</span><br><span class="line">        <span class="keyword">if</span>((*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&lt;=<span class="number">79</span>&amp;&amp;(*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&gt;=<span class="number">70</span>)</span><br><span class="line">            score=<span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">if</span>((*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&lt;=<span class="number">60</span>&amp;&amp;(*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&gt;=<span class="number">60</span>)</span><br><span class="line">            score=<span class="number">2.5</span>;</span><br><span class="line">        <span class="keyword">if</span>((*it)-&gt;<span class="built_in">getStudentWrapper</span>(id).<span class="built_in">getScore</span>()&lt;=<span class="number">60</span>)</span><br><span class="line">            score=<span class="number">2.0</span>;</span><br><span class="line">        allPoint+=(*it)-&gt;point;</span><br><span class="line">        allScore+=(*it)-&gt;point*score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> Grade=allScore/allPoint;</span><br><span class="line">    <span class="keyword">return</span> Grade;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STUDENT_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Degree</span> &#123;</span><br><span class="line">    undergraduate,</span><br><span class="line">    graduate</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement class Student.</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> std::string id;</span><br><span class="line">    <span class="type">const</span> std::string name;</span><br><span class="line">    <span class="type">const</span> std::string year;</span><br><span class="line">    Degree degree;</span><br><span class="line">    std::vector&lt;Class*&gt; classes;</span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getGrade</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addClass</span><span class="params">(Class* c)</span></span>;</span><br><span class="line">    <span class="built_in">Student</span>(std::string a,std::string b,std::string c):<span class="built_in">id</span>(a),<span class="built_in">name</span>(b),<span class="built_in">year</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement class Graduate.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graduate</span>:<span class="keyword">public</span> Student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">/* Degree degree=graduate;*/</span></span><br><span class="line">    <span class="built_in">Graduate</span>(std::string a,std::string b,std::string c): <span class="built_in">Student</span>(a,b,c)</span><br><span class="line">    &#123;</span><br><span class="line">        degree=graduate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getGrade</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement class Undergraduate.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span>:<span class="keyword">public</span> Student&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*Degree degree=undergraduate;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Undergraduate</span>(std::string a,std::string b,std::string c): <span class="built_in">Student</span>(a,b,c)</span><br><span class="line">    &#123;</span><br><span class="line">        degree=undergraduate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">getGrade</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentWrapper</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> score = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> Student &amp;student;</span><br><span class="line">    <span class="type">const</span> std::string id;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> fix error</span></span><br><span class="line">    <span class="comment">//solved</span></span><br><span class="line">    <span class="built_in">StudentWrapper</span>(<span class="type">const</span> std::string &amp;id, <span class="type">const</span> Student &amp;student) :<span class="built_in">student</span>(student),<span class="built_in">id</span>(id)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(<span class="type">double</span> score)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="built_in">double</span>(<span class="number">8</span>);</span><br><span class="line">               <span class="comment">//std::cout&lt;&lt;&quot;Wrong score!&quot;&lt;&lt;std::endl;</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">catch</span> (<span class="type">double</span>)</span><br><span class="line">       &#123;cout&lt;&lt;<span class="string">&quot;Wrong score!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getScore</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.<span class="built_in">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STUDENT_H_</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//Student.txt</span><br><span class="line"># id;name;year;degree</span><br><span class="line">F180370001;Apple;2019;U</span><br><span class="line">F180370002;Boy;2019;U</span><br><span class="line">F180370003;Cat;2019;U</span><br><span class="line">F180370004;Dog;2019;U</span><br><span class="line">F180370005;Egg;2019;U</span><br><span class="line">B180370001;Fish;2018;G</span><br><span class="line">B180370002;Girl;2018;G</span><br><span class="line">B180370003;Hand;2018;G</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//BugReport.txt</span><br><span class="line">StudentWrapper类构造函数问题原因：</span><br><span class="line"></span><br><span class="line">在StudentWrapper类中，student和id均被设置为const，所以在其构造函数中，不能直接对其进行赋值，而应该使用初始化列表对其进行初始化。</span><br></pre></td></tr></table></figure><hr><p>上面是代码，下面是可供测试的样例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//input0.txt</span><br><span class="line">i</span><br><span class="line">ICS</span><br><span class="line">F180370001</span><br><span class="line">90</span><br><span class="line">F180370002</span><br><span class="line">60</span><br><span class="line">F180370003</span><br><span class="line">70</span><br><span class="line">F180370004</span><br><span class="line">45</span><br><span class="line">F180370005</span><br><span class="line">0</span><br><span class="line">q</span><br><span class="line">English</span><br><span class="line">F180370001</span><br><span class="line">71</span><br><span class="line">F180370002</span><br><span class="line">72</span><br><span class="line">F180370003</span><br><span class="line">70</span><br><span class="line">B180370001</span><br><span class="line">76</span><br><span class="line">B180370002</span><br><span class="line">-200</span><br><span class="line">B180370003</span><br><span class="line">78</span><br><span class="line">q</span><br><span class="line">ADS</span><br><span class="line">B180370001</span><br><span class="line">80</span><br><span class="line">B180370002</span><br><span class="line">-200</span><br><span class="line">B180370003</span><br><span class="line">90</span><br><span class="line">q</span><br><span class="line">q</span><br><span class="line">a</span><br><span class="line">ICS</span><br><span class="line">ADS</span><br><span class="line">English</span><br><span class="line">q</span><br><span class="line">g</span><br><span class="line">B180370001</span><br><span class="line">B180370002</span><br><span class="line">B180370003</span><br><span class="line">B190370004</span><br><span class="line">F180370001</span><br><span class="line">F180370002</span><br><span class="line">F180370003</span><br><span class="line">F180370004</span><br><span class="line">F180370005</span><br><span class="line">q</span><br><span class="line">q</span><br><span class="line">q</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//output0.txt</span><br><span class="line">Please input the student id (or input q to quit): please input the score: Wrong score!</span><br><span class="line">Please input the student id (or input q to quit): please input the score: Wrong score!</span><br><span class="line">Please input the command: Please input the class name (or input q to quit): The average score is: 53.00</span><br><span class="line">Please input the class name (or input q to quit): The average score is: 56.67</span><br><span class="line">Please input the class name (or input q to quit): The average score is: 45.88</span><br><span class="line">GPA = 3.20</span><br><span class="line">GPA = 2.00</span><br><span class="line">GPA = 3.40</span><br><span class="line">Please input the student id (or input q to quit): No match student!</span><br><span class="line">GPA = 4.14</span><br><span class="line">GPA = 3.23</span><br><span class="line">GPA = 3.50</span><br><span class="line">GPA = 1.41</span><br><span class="line">GPA = 0.00</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>上面就是lab1的所有内容，祝您阅读愉快，代码能力++！</p><p>有任何建议，欢迎+vx：w2386181363进行沟通！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>周末，我们聊点人生</title>
      <link href="/2023/03/04/zhou-mo-wo-men-liao-dian-ren-sheng/"/>
      <url>/2023/03/04/zhou-mo-wo-men-liao-dian-ren-sheng/</url>
      
        <content type="html"><![CDATA[<p>周末，稍微空闲一点，那就在此时谈点人生。</p><p>这段话的灵感来源来自于学长up主“吴Simon”。会发表在我的个人博客上（估计没有多少人看到）。Anyway，就当是自己给生命的留痕吧。</p><p>长大后，我们发现，我们好像最缺少的一个品质就是勇气：站在crush面前，没有勇气去表白；在邪恶势力面前，没有勇气为正义发声；在人生的重大选择面前，没有勇气去挑战那个不可能的一面……</p><p>回想小时候的我们，是如此的有勇气：小时候被问最大的梦想是什么，是成为科学家，是像奥特曼一样征服怪兽，可是，如今，当自己最接近科学家，每天都有机会和他们接触时，却没勇气去试一试……</p><p>若问现在的自己有什么梦想，我却只能回答道：想要在上海扎根，或是在米国扎根，找个和自己差不多的女朋友，能买套还不错的房子，平平淡淡却幸福的平稳度过这一辈子。</p><p>到底是岁月将我们磨平了棱角，还是我们过成了世俗的姿态。</p><p>小时候，一切都是未知的，高中时，未来是憧憬的，但是进入大学，一切好像都是只有一条基本上固定的路，走向支路似乎就是一些没有勇气执行的挑战。</p><p>又能如何呢，走一步看一步吧，可能在若干年后，我也会羡慕此时的自己，好歹还有试错的机会。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大一下记录(weekly)</title>
      <link href="/2023/02/25/da-yi-xia-ji-lu-weekly/"/>
      <url>/2023/02/25/da-yi-xia-ji-lu-weekly/</url>
      
        <content type="html"><![CDATA[<h1 id="大一春学期记录（weekly）"><a href="#大一春学期记录（weekly）" class="headerlink" title="大一春学期记录（weekly）"></a>大一春学期记录（weekly）</h1><h4 id="早就听说大一秋学期的课只是小菜一碟，顶多跟高三一比，但是大一春学期是极为难熬的地狱模式（现在懂这段话了……）。痛苦的岁月会换来能力的提升，所以不妨将这段痛苦时光用weekly-report的形式记录下来，留个念想。"><a href="#早就听说大一秋学期的课只是小菜一碟，顶多跟高三一比，但是大一春学期是极为难熬的地狱模式（现在懂这段话了……）。痛苦的岁月会换来能力的提升，所以不妨将这段痛苦时光用weekly-report的形式记录下来，留个念想。" class="headerlink" title="早就听说大一秋学期的课只是小菜一碟，顶多跟高三一比，但是大一春学期是极为难熬的地狱模式（现在懂这段话了……）。痛苦的岁月会换来能力的提升，所以不妨将这段痛苦时光用weekly report的形式记录下来，留个念想。"></a>早就听说大一秋学期的课只是小菜一碟，顶多跟高三一比，但是大一春学期是极为难熬的地狱模式（现在懂这段话了……）。痛苦的岁月会换来能力的提升，所以不妨将这段痛苦时光用weekly report的形式记录下来，留个念想。</h4><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><p>新课表过的还不错（轻松），所有的任务都认真完成也没觉得有多累。周五没事做出去跟大太阳喝点东西，喝的晚上上吐下泻……</p><p>周六复旦好友cly来交大玩，带她逛了校园，喝了timo，吃了烤盘饭。</p><p>就在此时，我收到了要调整课表的消息，数据结构要调整到软件工程特定的姜丽红老师班级，同时还加上了一个学分的SEP。</p><p>紧跟着改变，我的物理也从我最爱的袁晓忠老师改到了陈洁老师。</p><p>心中有点不爽，但是，也算是个不错的开局吧！</p><p>期待去复旦玩。</p><h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><p>第二周开始疯狂模式了……</p><p>物理感觉讲的更浅了，个人感觉自己更加适合袁晓忠，但是毫无办法。</p><p>课表调整之后变得更两极分化：周一二五课比较多，但是双周的周三四则完全空出来了。</p><p>第二周的空闲当然并没有去玩，而是在包图写SEP的lab1，lab1虽然简单（跟后面的相比），但是真的好难呜呜呜……</p><p>vector之类的很多都没有讲，需要自己一点点去学。</p><p>自己花了周三四五的下午，终于完成了所有，但是：大的来了！</p><p>先是发现测试失败，只有40/100，反复修改之后变成了0</p><p>所有的test都是</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20230225153001758.png" alt="image-20230225153001758"></p><p>…………………………</p><p>真的崩了，周五下午六点完成的，在电脑上运行的很好，但是找runtime exception找了六个小时，一直到晚上十二点。</p><p>发了条朋友圈：</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20230225153125415.png" alt="image-20230225153125415"></p><p>感觉天要塌下来了。</p><p>第二天一早，收到了这条信息，让人愉悦！</p><p><img src="C:\Users\23861\AppData\Roaming\Typora\typora-user-images\image-20230225153226081.png" alt="image-20230225153226081"></p><p>666666666666666666666666666666666666！</p><p>周六去了农场参加劳动教育（玩），下午来华师辣，真的好多女生qaq</p><p>相信吧，未来更美好！</p><h2 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h2><p>相比第二周的大起大落，第三周过的很愉快。每天就上课写作业，没什么大的压力，周末准备去看一场源动力，再请晏子坤到交大来玩~</p><p>下一周要开始写lab2了，希望是开开心心得一周捏~！</p><p>（原本计划周末去南京，但因为住酒店的钱太过于昂贵，遂放弃。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数整理（部分）（前三章）</title>
      <link href="/2023/02/06/xian-xing-dai-shu-zheng-li/"/>
      <url>/2023/02/06/xian-xing-dai-shu-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数整理"><a href="#线性代数整理" class="headerlink" title="线性代数整理"></a>线性代数整理</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h2 id="第一章-矩阵与行列式"><a href="#第一章-矩阵与行列式" class="headerlink" title="第一章 矩阵与行列式"></a>第一章 矩阵与行列式</h2><h3 id="一、多项式"><a href="#一、多项式" class="headerlink" title="一、多项式"></a>一、多项式</h3><h3 id="二、矩阵的概念与运算"><a href="#二、矩阵的概念与运算" class="headerlink" title="二、矩阵的概念与运算"></a>二、矩阵的概念与运算</h3><h3 id="三、行列式"><a href="#三、行列式" class="headerlink" title="三、行列式"></a>三、行列式</h3><h3 id="四、可逆矩阵"><a href="#四、可逆矩阵" class="headerlink" title="四、可逆矩阵"></a>四、可逆矩阵</h3><h3 id="五、克莱姆法则"><a href="#五、克莱姆法则" class="headerlink" title="五、克莱姆法则"></a>五、克莱姆法则</h3><h3 id="六、矩阵的分块"><a href="#六、矩阵的分块" class="headerlink" title="六、矩阵的分块"></a>六、矩阵的分块</h3><h3 id="七、行列式的计算"><a href="#七、行列式的计算" class="headerlink" title="七、行列式的计算"></a>七、行列式的计算</h3><h3 id="八、几个特殊的矩阵"><a href="#八、几个特殊的矩阵" class="headerlink" title="八、几个特殊的矩阵"></a>八、几个特殊的矩阵</h3><h2 id="第二章-线性方程组理论"><a href="#第二章-线性方程组理论" class="headerlink" title="第二章 线性方程组理论"></a>第二章 线性方程组理论</h2><h3 id="一、矩阵的相抵标准形"><a href="#一、矩阵的相抵标准形" class="headerlink" title="一、矩阵的相抵标准形"></a>一、矩阵的相抵标准形</h3><h3 id="二、分块矩阵的初等变换"><a href="#二、分块矩阵的初等变换" class="headerlink" title="二、分块矩阵的初等变换"></a>二、分块矩阵的初等变换</h3><h3 id="三、n维向量空间"><a href="#三、n维向量空间" class="headerlink" title="三、n维向量空间"></a>三、n维向量空间</h3><h3 id="四、解线性方程组的消元法"><a href="#四、解线性方程组的消元法" class="headerlink" title="四、解线性方程组的消元法"></a>四、解线性方程组的消元法</h3><h3 id="五、向量的线性表示，线性相关和线性无关"><a href="#五、向量的线性表示，线性相关和线性无关" class="headerlink" title="五、向量的线性表示，线性相关和线性无关"></a>五、向量的线性表示，线性相关和线性无关</h3><h3 id="六、线性方程组解的结构"><a href="#六、线性方程组解的结构" class="headerlink" title="六、线性方程组解的结构"></a>六、线性方程组解的结构</h3><h2 id="第一章-矩阵与行列式-1"><a href="#第一章-矩阵与行列式-1" class="headerlink" title="第一章 矩阵与行列式"></a>第一章 矩阵与行列式</h2><h3 id="一、多项式-1"><a href="#一、多项式-1" class="headerlink" title="一、多项式"></a>一、多项式</h3><h4 id="1-多项式的带余除法"><a href="#1-多项式的带余除法" class="headerlink" title="1.多项式的带余除法"></a>1.多项式的带余除法</h4><p>若$p(x)$和$s(x)$是系数在数域F上的多项式，$s(x) \neq 0$,那么存在$p(x)=s(x)q(x)+r(x)$,$deg(r(x))&lt;deg(s(x))$</p><h4 id="2-多项式根与系数的关系"><a href="#2-多项式根与系数的关系" class="headerlink" title="2.多项式根与系数的关系"></a>2.多项式根与系数的关系</h4><p>若$p(x)=a_{m}x^{m}+a_{m-1}x^{m-1}+ \cdots+a_{0}$为系数在复数域C上的m次多项式. $x_{1},x_{1},……,x_{m}$是$p(x)$的m个根.那么</p><script type="math/tex; mode=display">x_{1}+x_{2}+\cdots+x_{m}=-\frac{a_{m-1}}{a_{m}}</script><script type="math/tex; mode=display">x_{1}x_{2}\cdots x_{m}=(-1)^{m}\frac{a_{0}}{a_{m}}</script><h4 id="3-数域"><a href="#3-数域" class="headerlink" title="3.数域"></a>3.数域</h4><ul><li><p>所有的正整数不构成数域</p></li><li><p>所有整数不构成数域</p></li><li><p>数域的特点总结</p><ul><li><p>一个集合</p></li><li><p>两种运算</p></li><li><p>四个规律</p><ul><li><p>加法交换</p></li><li><p>加法结合</p></li><li><p>存在特别元素0</p></li><li><p>存在特别元素1</p></li><li><p>存在负元素</p></li></ul></li></ul></li></ul><h3 id="二、矩阵的概念与运算-1"><a href="#二、矩阵的概念与运算-1" class="headerlink" title="二、矩阵的概念与运算"></a>二、矩阵的概念与运算</h3><h4 id="1-几种特殊类型的矩阵"><a href="#1-几种特殊类型的矩阵" class="headerlink" title="1.几种特殊类型的矩阵"></a>1.几种特殊类型的矩阵</h4><ul><li><p>行矩阵</p></li><li><p>列矩阵</p></li><li><p>零矩阵</p></li><li><p>方阵</p><ul><li><p>单位矩阵</p></li><li><p>对角形矩阵</p></li><li><p>数量矩阵，记作$aE$或者$aI$</p></li><li><p>对称矩阵</p><p>$a_{ij}=a_{ji}$</p></li><li><p>反对称矩阵</p><p>$a_{ij}=-a_{ji}$</p><p>反对称矩阵对角线上元素一定是0</p></li><li><p>三角形矩阵</p><ul><li>上三角</li><li>下三角</li></ul></li></ul></li></ul><h4 id="2-矩阵的运算"><a href="#2-矩阵的运算" class="headerlink" title="2.矩阵的运算"></a>2.矩阵的运算</h4><ul><li><p>矩阵的加法</p><ul><li><p>矩阵加法运算的性质</p><p><script type="math/tex">A+B=B+A;</script>(加法交换律）</p><p>$(A+B)+C=A+(B+C);$（加法结合律）</p><p>$A+O=O+A;$(加法单位元)</p><p>$A+(-A)=O;$(加法逆元）</p></li></ul></li><li><p>矩阵的数乘</p><ul><li><p>矩阵数乘的性质-</p><p>$1A=A$</p><p>$k(lA)=(kl)A$</p><p>$(k+l)A=kA+lA$</p><p>$k(A+B)=kA+kB$</p></li></ul></li><li><p>矩阵的乘法</p><ul><li>$A\cdot B=C$</li></ul><p>​       则$c_{ij}=a_{i1}b_{1j}+a_{i2}b_{2j}+\cdots a_{ip}b_{pj}=\sum\limits_{k=1}^p a_{ik}b_{kj}$</p><ul><li><p>矩阵乘法的性质</p><p>$(AB)C=A(BC)$</p><p>$k(AB)=(kA)B=A(kB)$</p><p>$(A+B)C=AC+BC$</p><p>$C(A+B)=CA+CB$</p><p>$k(A+B)=kA+kB$</p><p>$A_{m\times p}O_{p\times n}=O_{m\times n}$</p></li></ul></li><li><p>矩阵的转置</p><ul><li><p>矩阵转置运算的性质</p><p>$(A^{T})^{T}=A$</p><p>$(A+B)^{T}=A^{T}+B^{T}$</p><p>$(kA)^T=k(A)^T$</p><p>$(AB)^{T}=B^{T}A^{T}$</p></li></ul></li><li><p>矩阵的共轭</p></li><li>矩阵的迹</li></ul><h3 id="三、行列式-1"><a href="#三、行列式-1" class="headerlink" title="三、行列式"></a>三、行列式</h3><h4 id="1-排列的逆序数"><a href="#1-排列的逆序数" class="headerlink" title="1.排列的逆序数"></a>1.排列的逆序数</h4><p>逆序定义：在一个排列$(i_{1}i_{2}\cdots i_{t}\cdots i_{n}),t<s$中，若数$i_{t}>i_{s}$则称这两个数组成此排列的一个逆序；否则称这两个数组成此排列的一个逆序；否则称这两个数组成此排列的一个顺序。</p><p>逆序数定义：在一个排列$i_{1}i_{2}\cdots i_{t}\cdots i_{n}$中逆序的总数称为此排列的逆序数。记为$\tau(i_{1}i_{2}\cdots i_{t}\cdots i_{n})$</p><p>逆序数为奇数的排列为奇排列；</p><p>逆序数为偶数的排列为偶排列。</p><p>一个排列中的任意两个元素对换，排列改变奇偶性。</p><h4 id="2-行列式"><a href="#2-行列式" class="headerlink" title="2.行列式"></a>2.行列式</h4><ul><li>行列式的定义</li><li>贡献法</li><li><p>行列式的性质</p><ul><li>$D=D^{T}$</li><li>行列式的两行（列）互换，行列式的值变号。</li><li>如果行列式有两行（列）完全相同，则此行列式为零。</li><li>行列式的某一行（列）中所有的元素都乘以同一个数k，等于用数k乘此行列式。</li><li>行列式中如果有两行（列）元素成比例，则此行列式为零。</li><li>若行列式的某一行（列)的元素都是两数之和，则该行列式等于两行列式之和。</li><li>把行列式的某一行（列）的各元素乘以同一数然后加到另一行（列）对应的元素上去，行列式不变。</li></ul></li><li><p>行列式的初等变换</p><ul><li>交换行列式的两行（列）</li><li>行列式的一行(列)同乘以一个不等于0的数k</li><li>行列式的一行（列）乘以一个数以后加至行列式的另一行（列）</li></ul></li><li><p>行列式按行（列）展开</p><ul><li>余子式定义：在n阶行列式$D_{n}$中，划掉元素$a_{ij}$所在的行与列中的所有元素，余下的元素按原来的次序构成的n-1阶行列式，成为元素$a_{ij}$的余子式，记作$M_{ij}$.</li><li><p>代数余子式定义：称$(-1)^{i+j}M_{ij}$为元素$a_{ij}$的代数余子式，记作$A_{ij}$</p></li><li><p>行列式按行（列）展开定理：</p><p>n阶行列式D的值等于它任一行的各元素与其对应的代数余子式乘积之和。</p><ul><li>推论 n阶行列式D的任一行（列）的各元素与另一行（列）对应的各元素的代数余子式的乘积之和等于0.</li></ul></li></ul></li><li><p>范德蒙德行列式</p><script type="math/tex; mode=display">D_{n}=\begin{vmatrix}1&1&1&\cdots&1\\x_{1}&x_{2}&x_{3}&\cdots&x_{n}\\x_{1}^{2}&x_{2}^{2}&x_{3}^{2}&\cdots&x_{n}^{2}\\\cdots&\cdots&\cdots&\cdots&\cdots&\\x_{1}^{n-1}&x_{2}^{n-1}&x_{3}^{n-1}&\cdots&x_{n}^{n-1}\\\end{vmatrix}=\Pi_{1\leq j<i\leq n}(x_{i}-x_{j})</script></li><li><p>拉普拉斯展开定理</p><ul><li><p>在n阶行列式D中，任取k行k列，位于这k行k列交叉位置的元素按行列式D中的相对位置按原行列式D中的相对位置排成的k阶行列式N称为行列式D的一个k阶子式。</p></li><li><p>在行列式D中，划去k阶子式N所在的k行k列，剩余元素按原行列式D中的相对位置排成的n-k阶行列式M称为k阶子式N的余子式。</p></li><li><p>如果子式N的k行k列在D中的行标与列标分别为$i_{1},i_{2},\cdots ,i_{k},j_{1},j_{2},\cdots ,j_{k}$则称<script type="math/tex">A=(-1)^{(i_{1}+i_{2}+\cdots +i_{k}+j_{1}+j_{2}+\cdots +j_{k})}M</script></p><p>为N的代数余子式。</p></li><li><p><strong>Laplace定理</strong>  设在n阶行列式D中，取定某k行，则D位于这k行的所有k阶子式 $N_{i}(i=1,2,3,…,t)$与它们各自对应的代数余子式$A_{i}$的乘积之和等于行列式D，即</p><p>$D=N_{1}A_{1}+N_{2}A_{2}+\cdots+N_{t}A_{t}=\sum\limits_{i=1}^tN_{i}A_{i}$</p></li></ul></li><li><p>行列式的乘积法则</p><p>$|A_{n}B_{n}|=|A_{n}||B_{n}|$</p></li></ul><h3 id="四、可逆矩阵-1"><a href="#四、可逆矩阵-1" class="headerlink" title="四、可逆矩阵"></a>四、可逆矩阵</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>设A为n阶方阵，若存在n阶方阵B，使得$AB=BA=E$则称A是n阶可逆矩阵，或可逆阵，称B是A的逆矩阵。A的逆矩阵记作$A^{-1}$</p><h4 id="2-条件"><a href="#2-条件" class="headerlink" title="2.条件"></a>2.条件</h4><p>矩阵A可逆的充分必要条件是A的行列式不等于0.</p><h4 id="3-伴随矩阵"><a href="#3-伴随矩阵" class="headerlink" title="3.伴随矩阵"></a>3.伴随矩阵</h4><ul><li><p>伴随矩阵的性质</p><p>$AA^{<em>}=A^{</em>}A=|A|E_{n}$</p></li></ul><h4 id="4-逆矩阵的性质"><a href="#4-逆矩阵的性质" class="headerlink" title="4.逆矩阵的性质"></a>4.逆矩阵的性质</h4><ul><li>$(A^{-1})^{-1}=A$</li><li>$若k\neq 0，则(kA)^{-1}=\frac{1}{k}A^{-1}$</li><li>$(A_{1}A_{2}\cdots A_{m})^{-1}= A_{m}^{-1}A_{m-1}^{-1}\cdots A_{1}^{-1}$</li><li>$(A^{T})^{-1}=(A^{-1})^{T}$</li><li>$|A^{-1}|=|A|^{-1}$</li><li>$(A^{m})^{-1}=(A^{-1})^{m}$</li><li>$|A^{*}|=|A|^{n-1}$</li></ul><h4 id="5-一些小结论"><a href="#5-一些小结论" class="headerlink" title="5.一些小结论"></a>5.一些小结论</h4><ul><li><p>若A,B可逆：</p><script type="math/tex; mode=display">{\begin{pmatrix}A&O\\O&B\\\end{pmatrix}}^{-1}= \begin{pmatrix}A^{-1}&O\\O&B^{-1}\\\end{pmatrix}</script><script type="math/tex; mode=display">{\begin{pmatrix}O&A\\B&O\\\end{pmatrix}}^{-1}= \begin{pmatrix}O&B^{-1}\\A^{-1}&O\\\end{pmatrix}​</script></li><li><p>若A,C可逆：</p><script type="math/tex; mode=display">{\begin{pmatrix}A&B\\O&C\\\end{pmatrix}}^{-1}= \begin{pmatrix}A^{-1}&-A^{-1}BC^{-1}\\O&C^{-1}\\\end{pmatrix}</script></li></ul><h3 id="五、克莱姆法则-1"><a href="#五、克莱姆法则-1" class="headerlink" title="五、克莱姆法则"></a>五、克莱姆法则</h3><ul><li><p>法则内容：</p><p>有线性方程组：</p><script type="math/tex; mode=display">D(x) = \begin{cases}a_{11}x_{1}+a_{12}x_{2}+\cdots+a_{1n}x_{n}=b_{1}\\a_{21}x_{1}+a_{22}x_{2}+\cdots+a_{2n}x_{n}=b_{2}\\\cdots\cdots\cdots\cdots\cdots\cdots\cdots\cdots\cdots\cdots\\a_{n1}x_{1}+a_{n2}x_{2}+\cdots+a_{nn}x_{n}=b_{n}\\\end{cases}</script><p>的系数行列式不等于0，则非齐次方程组一定有解，且解是唯一的。</p><p>解可以表述为：</p><p>$x_{1}=\frac{D_{1}}{D},x_{2}=\frac{D_{2}}{D},\cdots,x_{n}=\frac{D_{n}}{D}$</p></li><li><p>克莱姆法则的证明：</p><p>可将原方程组写成矩阵方程$AX=B$,若系数矩阵A可逆，则解向量X为：</p><script type="math/tex; mode=display">X=A^{-1}B=\frac{A^{*}B}{D}</script></li><li><p>如果线性方程组无解或者有两个不同的解，则它的系数行列式必为零。</p></li></ul><h3 id="六、矩阵的分块-1"><a href="#六、矩阵的分块-1" class="headerlink" title="六、矩阵的分块"></a>六、矩阵的分块</h3><ul><li><p>定义：将矩阵A用若干条纵线和横线分成许多小矩阵，每个小矩阵称为A的一个子块，以这些子块为元素的形式上的矩阵称为分块矩阵。</p></li><li><p>基本原则</p><p>不管整体，还是局部小块，都必须符合矩阵运算规则</p></li><li><p>若$AB=O$,则矩阵B的列都是齐次线性方程组$AX=0$的解。</p></li><li><p>经常将矩阵分为行（列）向量，将矩阵相乘转化。</p></li><li><p>标准单位行（列）向量：</p><ul><li>以行为例：$\varepsilon_{1}=\begin{pmatrix}1\\0\\\vdots\\0\\\end{pmatrix}<script type="math/tex">\varepsilon_{2}=\begin{pmatrix}0\\1\\\vdots\\0\\\end{pmatrix}</script>\cdots$$\varepsilon_{n}=\begin{pmatrix}0\\0\\\vdots\\1\\\end{pmatrix}$</li></ul></li></ul><pre><code>特点：任何一个n维行向量，都可以由上述n个行向量线性表示出来​           任意一个标准单位行向量都无法由其他向量线性表示出来</code></pre><h3 id="七、行列式的计算-1"><a href="#七、行列式的计算-1" class="headerlink" title="七、行列式的计算"></a>七、行列式的计算</h3><ul><li><p><strong>各行/列和固定行列式</strong></p><p>全部加到某一行/列上，再进行相减。</p></li><li><p><strong>爪形行列式</strong></p><p>用初等变换化成三角形行列式</p></li><li><p><strong>除对角线之外均相同行列式</strong></p><p>用初等变换化为爪形</p></li><li><p><strong>两三角形行列式</strong></p><p>拆行-递推</p></li><li><p><strong>两对角线形行列式</strong></p><p>使用laplace定理</p></li><li><p><strong>三对角形</strong></p><p>按第一行展开后化为数列问题解决</p></li><li><p><strong>vandemonde行列式问题</strong></p></li></ul><h3 id="八、几个特殊的矩阵-1"><a href="#八、几个特殊的矩阵-1" class="headerlink" title="八、几个特殊的矩阵"></a>八、几个特殊的矩阵</h3><ul><li>幂零矩阵<ul><li>定义：设A为n阶方阵，若存在整数m，使得$A^{m}=O$,则称A为幂零矩阵，称最小的整数m为幂零指数</li><li>幂零矩阵的性质<ul><li>存在列向量$\alpha$,使得$A^{m-1}\alpha\neq0$</li><li>方程组$x_{1}\alpha+x_{1}A\alpha+\cdots+x_{m}A^{m-1}\alpha=0$只有零解</li></ul></li></ul></li><li>幂等矩阵<ul><li>定义：设A为n阶方阵，若$A^{2}=A$，那么称A为幂等矩阵（投影矩阵）</li><li>性质：设A为n阶幂等矩阵.令$U=${${Ax|x\epsilon\mathbb{R}^{n}}$},$V=${${x\epsilon\mathbb{R}|Ax=0}$}<ul><li>对任意$u\epsilon U$有$Au=u$</li><li>对任意$v\epsilon V$有$Av=0$</li><li>$U\bigcap V={0}$</li><li>对任意向量，存在唯一的向量$u\epsilon U$，$v\epsilon V$使得向量为两者之和</li></ul></li></ul></li><li>对合矩阵<ul><li>定义：设A为n阶方阵，若$A^{2}=E$，那么称A为对合矩阵。</li></ul></li><li>周期矩阵<ul><li>定义：设A为n阶复方阵，若存在正整数$A^{k}=E$,那么称A为周期矩阵。</li></ul></li></ul><h2 id="第二章-线性方程组理论-1"><a href="#第二章-线性方程组理论-1" class="headerlink" title="第二章 线性方程组理论"></a>第二章 线性方程组理论</h2><h3 id="一、矩阵的相抵标准形-1"><a href="#一、矩阵的相抵标准形-1" class="headerlink" title="一、矩阵的相抵标准形"></a>一、矩阵的相抵标准形</h3><h4 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h4><ul><li>交换矩阵的两行（列）；</li><li>将矩阵的某一行（列）的各个元素乘以同一个非零的数k；</li><li>将矩阵的某一行（列）的各个元素乘以同一个数k后，加到另一行（列）上去；</li></ul><h4 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h4><p>若A和B能互相经过初等变换得到，那么称A与B等价。</p><p>等价关系：</p><p>①A∽A（反身性）</p><p>②若A∽B，则B∽A</p><p>③若A∽B,B∽C，则A∽C（传递性）</p><h4 id="行阶梯形矩阵的定义"><a href="#行阶梯形矩阵的定义" class="headerlink" title="行阶梯形矩阵的定义"></a>行阶梯形矩阵的定义</h4><p>（1）若矩阵A存在零行，则零行在非零行的下方；</p><p>（2)设A的第k个非零行的第一个非零元素在第$j_{k}$列，共有r个非零行，则$j_{1}&lt;j_{2}&lt;\cdots&lt;j_{r}$;</p><p>那么我们称矩阵A为行阶梯形矩阵。</p><ul><li>定理：任意矩阵可以经过单纯的初等行变换化为行阶梯形矩阵（不唯一）。</li></ul><h4 id="规范的行阶梯形矩阵的定义"><a href="#规范的行阶梯形矩阵的定义" class="headerlink" title="规范的行阶梯形矩阵的定义"></a>规范的行阶梯形矩阵的定义</h4><p>矩阵A是一个行阶梯形矩阵，如果A满足下述条件：</p><p>（1）每个非零行的第一个非零元素为1；</p><p>（2）每个非零行的第一个非零元素所在列的其他的元素都为0；</p><p>那么我们称矩阵A为规范的行阶梯形矩阵。</p><ul><li>定理：任意矩阵可以经过单纯的初等行变换化为规范的行阶梯形矩阵（唯一）。</li><li>定理：任意矩阵可以经过初等行列变换化为标准形矩阵。</li></ul><h4 id="矩阵的等价"><a href="#矩阵的等价" class="headerlink" title="矩阵的等价"></a>矩阵的等价</h4><p>如果矩阵A经过有限次初等变换化为矩阵B，则称矩阵A与B等价（相抵）。</p><p>同样的，矩阵的等价关系也有</p><ul><li>自反性</li><li>对称性</li><li>传递性</li></ul><p>(I)矩阵A与B等价的充分必要条件是：</p><p>存在可逆矩阵P和Q，使得$PAQ=B$</p><p>(II)m行矩阵A与B等价的充分必要条件是：</p><p>A与B有相同的标准形</p><h4 id="初等矩阵"><a href="#初等矩阵" class="headerlink" title="初等矩阵"></a>初等矩阵</h4><ul><li><p>定义：单位矩阵经过一次初等变换所得到的矩阵称为初等矩阵</p></li><li><p>定理：用一个m（n）阶初等矩阵左（右）乘一个m×n阶矩阵，相当于对这个矩阵作相应的初等行（列）变换</p></li><li>定理：对矩阵初等行（列）变换相当于在这个矩阵左（右）边乘以一个相应的初等矩阵。</li><li>推论：初等矩阵都是可逆矩阵，且其逆矩阵是同类型的初等矩阵。</li><li><p>定理：设A为m×n矩阵，则存在矩阵$R_{1},R_{2},\cdots,R_{s}$,使得$R_{1}R_{2}\cdots R_{s}A$为（规范的）阶梯形矩阵；进一步，存在初等矩阵$C_{1},C_{2},\cdots,C_{s}$,使得$R_{1}R_{2}\cdots R_{s}AC_{1}C_{2}\cdots C_{s}$</p></li><li><p>推论：对于mn矩阵A，存在m阶可逆矩阵P和n阶可逆矩阵Q,使得</p><script type="math/tex; mode=display">PAQ=\begin{pmatrix}E_{r}&O\\O&O\\\end{pmatrix}</script></li><li><p>推论：设A为可逆矩阵，则存在初等矩阵$R_{1},R_{2},\cdots,R_{s}$，使得$R_{1}R_{2}\cdots R_{s}A=E$；这样，$A=R_{s}^{-1}R_{s}^{-1}\cdots R_{1}^{-1};$</p></li><li>推论：n阶矩阵可逆且仅当它可以表示成一些初等矩阵的乘积。</li><li>推论：设A为m×n矩阵，P为m阶可逆矩阵，Q为n阶可逆矩阵，则PA,AQ,PAQ有相同的标准形。</li></ul><h4 id="求逆矩阵的初等变换法"><a href="#求逆矩阵的初等变换法" class="headerlink" title="求逆矩阵的初等变换法"></a>求逆矩阵的初等变换法</h4><p>注意到</p><p>$R_{1}R_{2}\cdots R_{s}A=E$</p><p>$R_{1}R_{2}\cdots R_{s}=A^{-1}$</p><p>$R_{1}R_{2}\cdots R_{s}E=A^{-1}$</p><p>构造一个分块矩阵$(A\quad E)$，我们有</p><p>$R_{1}R_{2}\cdots R_{s}(A\quad E)=(R_{1}R_{2}\cdots R_{s}A\quad R_{1}R_{2}\cdots R_{s}E)=(E\quad A^{-1})$</p><h4 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h4><ul><li>m行n列矩阵A的k阶子式子概念：</li></ul><p>令$k\le min${m,n},从A中取k行，k列的交叉点上元素，按照它们在矩阵A中的相对位置组成的k阶行列式。</p><ul><li>矩阵的秩</li></ul><p>设矩阵A是mxn阵，若存在一个r阶子式不为0，而矩阵A的全部r+1阶子式都为0，则称矩阵A的秩为r，记作r（A）=r。</p><ul><li><p>矩阵秩的性质</p><p>(1)唯一性；</p><p>(2)$r(A_{m×n})\le min${m，n}；</p><p>(3)若矩阵A有一个r阶子式不为0，则$r(A)\ge r$;</p><p>(4)若矩阵A的所有r阶子式都为0，则$r(A)\le r$</p><p>(5)$r(A^{T})=r(A)$</p><p>(6)行阶梯形矩阵的秩等于非零行的数目；</p><p>(7)n阶可逆矩阵的秩等于n。</p></li><li><p>行（列）满秩矩阵：</p><p>设矩阵A为m×n阶矩阵，若r（A）=m（r(A)=n),则称矩阵A为行（列）满秩矩阵.</p></li></ul><p>A是n阶可逆阵当且仅当A是n阶满秩矩阵，当且仅当A是n阶非奇异阵。</p><ul><li><p>初等变换不改变矩阵的秩</p><p>矩阵的秩是矩阵变换下的不变量</p></li><li><p>推论：设矩阵A的秩为r，即r(A)=r,则A的标准形矩阵为：</p><script type="math/tex; mode=display">\begin{pmatrix}E_{r}&O\\O&O\\\end{pmatrix}</script></li><li><p>矩阵乘以一个可逆阵，秩不变。</p></li><li><p>A为m×n矩阵，r（A）=r，则A可以分解为r个秩为1的矩阵的和</p></li><li><p>A为m×n矩阵，r（A）=r当且仅当存在m×r矩阵P和r×n矩阵Q，满足r(P)=r(Q)=r,且A=PQ</p><h3 id="二、分块矩阵的初等变换-1"><a href="#二、分块矩阵的初等变换-1" class="headerlink" title="二、分块矩阵的初等变换"></a>二、分块矩阵的初等变换</h3><h4 id="分块矩阵初等变换和分块初等矩阵"><a href="#分块矩阵初等变换和分块初等矩阵" class="headerlink" title="分块矩阵初等变换和分块初等矩阵"></a>分块矩阵初等变换和分块初等矩阵</h4></li><li><p>对分块矩阵的行列实施下列三种操作之一，称为对分块矩阵实施了一次初等变换：</p><ul><li>交换分块矩阵的两行</li><li>用一个可逆矩阵P(Q)左（右）乘分块的某行的各子块</li><li>用一个适当阶数的矩阵左（右）乘分块矩阵某行（列）的各子块后加到另一行的对应子块上去</li></ul></li><li><p>分块初等矩阵</p><p>分块的单位矩阵经过一次分块初等变换所得到的矩阵称为分块初等矩阵</p></li><li><p>定理:用分块初等矩阵左（右）乘分块矩阵相当于对分块矩阵实施相应的分块初等变换</p></li><li><p>行列式第一降阶定理：</p><p>设</p><script type="math/tex; mode=display">M=\begin{pmatrix}A&B\\C&D\\\end{pmatrix}</script><p>且$|A|\neq0$,则$|M|=|A|\cdot |D-CA^{-1}B|$</p></li></ul><h4 id="矩阵的秩重要性质整理"><a href="#矩阵的秩重要性质整理" class="headerlink" title="矩阵的秩重要性质整理"></a>矩阵的秩重要性质整理</h4><p>对$A\epsilon\mathbb{R}^{m×n}$</p><ul><li><p>0$\le r(A)\le min(n,m)$;</p></li><li><p>$r(A^{T})=r(A)，r(kA)=r(A)(k\neq 0)$</p></li><li><p>若$P\epsilon\mathbb{R}^{m×m}$$Q\epsilon\mathbb{R}^{n×n}$且P,Q可逆，则r（PAQ)=r(A);</p></li><li><p>$0\le r(A+B)\le r(A)+r(B);$</p></li><li><p>$max(r(A),r(B),r(A+B))\le r[A\quad B]\le r(A)+r(B)$</p></li><li><script type="math/tex; mode=display">\begin{pmatrix}A&O\\O&B\\\end{pmatrix}=r(A)+r(B)</script></li><li><script type="math/tex; mode=display">\begin{pmatrix}A&O\\C&B\\\end{pmatrix}\ge r(A)+r(B)</script></li><li><script type="math/tex; mode=display">\begin{pmatrix}A&C\\O&B\\\end{pmatrix}\ge r(A)+r(B)</script></li><li><p>$r(A)+r(B)-n\le r(AB) \le min(r(A),r(B));$</p></li><li><p>$r(A^{*})的情况（若r(A)=n,则n；n-1则1；否则0）；$</p></li><li><p>Frobenius不等式：$r(ABC)\ge r(AB)+r(BC)-r(B);$</p></li><li><p>$r(A)=r(A^{T}A)=r(A A^{T})=r(A^{T})$</p></li></ul><h3 id="三、n维向量空间-1"><a href="#三、n维向量空间-1" class="headerlink" title="三、n维向量空间"></a>三、n维向量空间</h3><ul><li><p>n维向量的运算性质</p><p>加法：</p><p>$(1)\alpha +\beta=\beta +\alpha$</p><p>$(2)(\alpha +\beta)+\gamma =\alpha+(\beta +\gamma)$</p><p>$(3)\alpha+0=\alpha$</p><p>$(4)\alpha+(-\alpha)=0$</p><p>数乘：</p><p>$(5) 1\alpha=\alpha$</p><p>$(6)k(l\alpha)=l(k\alpha)=(kl)\alpha$</p><p>$(7)k(\alpha +\beta)=k\alpha +k\beta$</p><p>$(8)(k+l)\alpha=k\alpha+l\alpha$</p></li><li><p>n维向量空间的子空间</p><p>$S\subseteq F^{n}$,且S非空。如果S对于加法与数乘运算封闭，那么说S是$F^{n}$的子空间。、</p></li></ul><h3 id="四、解线性方程组的消元法-1"><a href="#四、解线性方程组的消元法-1" class="headerlink" title="四、解线性方程组的消元法"></a>四、解线性方程组的消元法</h3><ul><li>线性方程组<br>$$<br>\begin{align*}</li></ul><p>  \begin{split}</p><p>  \left \{</p><p>  \begin{array}{ll}</p><pre><code>  a_&#123;11&#125;x_&#123;1&#125;+a_&#123;12&#125;x_&#123;2&#125;+\cdots a_&#123;1n&#125;x_&#123;n&#125;=b_&#123;1&#125;\\  a_&#123;21&#125;x_&#123;1&#125;+a_&#123;22&#125;x_&#123;2&#125;+\cdots a_&#123;2n&#125;x_&#123;n&#125;=b_&#123;2&#125;\\  \cdots \cdots \cdots \cdots\cdots \cdots \cdots \cdots \cdots \cdots  \\  a_&#123;n1&#125;x_&#123;1&#125;+a_&#123;n2&#125;x_&#123;2&#125;+\cdots a_&#123;nn&#125;x_&#123;n&#125;=b_&#123;n&#125;\\</code></pre><p>  \end{array}</p><p>  \right.</p><p>  \end{split}</p><p>  \end{align*}</p><script type="math/tex; mode=display">$b_{1},b_{2},\cdots ,b_{m}$不全为0时，称为非齐次线性方程组，$b_{1},b_{2},\cdots ,b_{m}$全为0时，称为齐次线性方程组。+ $系数矩阵的秩\le 增广矩阵的秩\le 系数矩阵的秩+1$+ 如果两个方程组的解的集合完全相同，那么我们所这两个方程组是同解方程组。+ 消元法解线性方程组AX=B方法：  （1）通过初等行变换将线性方程组的增广矩阵化为规范的阶梯形矩阵T；  （2）写出以T为增广矩阵的同解方程组；  （3）将一些自由未知量移到等式右边。+ 自由未知量的个数为：未知数的个数-系数矩阵的秩+ 解的情况总结：  1.系数矩阵的秩=增广矩阵的秩时，有解  2.系数矩阵的秩=增广矩阵的秩，没有自由未知量（n-r（A)=0)时，有唯一解  3.系数矩阵的秩=增广矩阵的秩，有自由未知量（n-r（A)>0)时，有无穷多解  4.系数矩阵的秩不等于增广矩阵的秩，无解+ 齐次线性方程组AX=O总是有解的（0解）。  方程组存在非0解当且仅当r（A）=r<n  方程组只有0解当且仅当r（A)=n### 五、向量的线性表示，线性相关和线性无关+ 向量组线性表出具有传递性+ 向量组的等价  设有两个向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}和\beta_{1},\beta_{2},\cdots ,\beta_{t}$，$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$可由$\beta_{1},\beta_{2},\cdots ,\beta_{t}$线性表出，$\beta_{1},\beta_{2},\cdots ,\beta_{t}$也可由$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$线性表出，那么称向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$与向量组$\beta_{1},\beta_{2},\cdots ,\beta_{t}$等价。  向量组等价意味着可以相互表示+ 线性相关与线性无关  设$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$是m个n维向量，若存在m个不全为0的数$k_{1},k_{2}\cdots k_{m}$,使得</script><p>  k_{1}\alpha_{1}+k_{2}\alpha_{2}+\cdots +k_{m}\alpha_{m}=0</p><p>  $$<br>  其中0为n维向量，则称$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$线性相关；否则称它们线性无关。</p><ul><li><p>一些有关向量线性相关性的结论</p><p>m个n维向量中，若含有0向量，则这m个向量线性相关；</p><p>m个n维向量中，若有一部分向量线性相关，则这m个向量线性相关；</p><p>若m个n维向量是线性无关的，则这m个向量中的任何一部分向量，放在一起，也是线性无关的</p><p>$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$线性相关（无关）$&lt;=&gt;$齐次线性方程组$x_{1}\alpha_{1}+x_{2}\alpha_{2}+\cdots +x_{m}\alpha_{m}=0$有非零解（只有零解）</p></li><li><p>向量组的极大线性无关组</p><p>定义：设有向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$，若$\alpha_{i_{1}},\alpha_{i_{2}},\cdots ,\alpha_{i_{r}}$是向量组的r个向量，且满足</p><p>（1）$\alpha_{i_{1}},\alpha_{i_{2}},\cdots ,\alpha_{i_{r}}$线性无关</p><p>（2）向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$的任意一个向量都可以由$\alpha_{i_{1}},\alpha_{i_{2}},\cdots ,\alpha_{i_{r}}$线性表出，</p><p>则称$\alpha_{i_{1}},\alpha_{i_{2}},\cdots ,\alpha_{i_{r}}$是向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$的一个极大线性无关组。</p></li><li><p>定理：给定两个向量组</p><p>（I）$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$</p><p>（II）$\beta_{1},\beta_{2},\cdots ,\beta_{t}$</p><p>如果（1)$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$可由$\beta_{1},\beta_{2},\cdots ,\beta_{t}$线性表出（2）$s&gt;t$</p><p>那么$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$线性相关</p></li><li><p>给定两个向量组</p><p>（I）$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$</p><p>（II）$\beta_{1},\beta_{2},\cdots ,\beta_{t}$</p><p>如果（1)$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$可由$\beta_{1},\beta_{2},\cdots ,\beta_{t}$线性表出（2）$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$线性无关</p><p>那么$s\le t$</p></li><li><p>关于向量组的秩的有关结论</p><ul><li>向量组$\alpha_{1},\alpha_{2},\cdots ,\alpha_{m}$线性无关$&lt;=&gt;r(\alpha_{1},\alpha_{2},\cdots ,\alpha_{m})=m$</li><li>$r(\alpha_{1},\alpha_{2},\cdots ,\alpha_{m})=r&gt;0$,则向量组中任意k&gt;r个向量都是线性无关的。</li><li>若$r(\alpha_{1},\alpha_{2},\cdots ,\alpha_{m})=r&gt;0$，则向量组任意r个线性无关的向量都是它的一个极大线性无关组</li><li>若$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$可由$\beta_{1},\beta_{2},\cdots ,\beta_{t}$线性表出，则$r(\alpha_{1},\alpha_{2},\cdots ,\alpha_{s})\le r(\beta_{1},\beta_{2},\cdots ,\beta_{t})$</li><li>等价的向量组有相同的秩</li></ul></li><li><p>矩阵的秩=矩阵的列秩=矩阵的行秩</p></li><li><p>$\alpha_{1},\alpha_{2},\cdots ,\alpha_{s}$线性无关，$(\beta_{1}\quad\beta_{2}\quad\cdots \beta_{m})=(\alpha_{1}\quad\alpha_{2}\quad\cdots \alpha_{s})A_{s×m}$</p><p>则r($\beta_{1},\beta_{2},\cdots ,\beta_{m}$)=r（A)</p></li></ul><h3 id="六、线性方程组解的结构-1"><a href="#六、线性方程组解的结构-1" class="headerlink" title="六、线性方程组解的结构"></a>六、线性方程组解的结构</h3><ul><li><p>齐次线性方程组任意解的线性组合还是方程组的解</p></li><li><p>解的结构：</p><p>定义:（1）设$\xi_{1},\xi_{2},\cdots,\xi_{s}$线性无关（2）齐次线性方程组的任意一个解都可以由$\xi_{1},\xi_{2},\cdots,\xi_{s}$线性表出</p><p>则称$\xi_{1},\xi_{2},\cdots,\xi_{s}$为齐次线性方程组的基础解系。</p></li><li><p>非齐次方程组解的性质：</p><p>设$\xi_{1},\xi_{2}$是线性方程组Ax=B的解</p><p>那么（I）$\xi_{1}-\xi_{2}$是齐次线性方程组Ax=0的解；</p><p>​       （2）若$\xi$是线性方程组Ax=B的解，$\rho$是线性方程组Ax=0的解，那么$\xi+\rho$是方程组Ax=B的解</p></li><li><p>非齐次线性方程组的通解=非齐次线性方程组的特解+对应的齐次线性方程组的通解</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过hexo和github创建个人blog指北</title>
      <link href="/2023/02/06/tong-guo-hexo-he-github-chuang-jian-ge-ren-blog-zhi-bei/"/>
      <url>/2023/02/06/tong-guo-hexo-he-github-chuang-jian-ge-ren-blog-zhi-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="通过hexo和github创建个人blog指北"><a href="#通过hexo和github创建个人blog指北" class="headerlink" title="通过hexo和github创建个人blog指北"></a>通过hexo和github创建个人blog指北</h1><p><strong>寒假闲来无事，就想搞个blog空间放点自己个人感想之类（深受wmgg和cnjj影响），正巧学院要求每个人都要写个人感想（卷素拓），就下定决心搞一个，途中充满坎坷，最后五次重头再来，终于成功搭建。</strong></p><p><strong>在此过程中，感谢wmgg和cnjj的帮忙~要不是没有他们接受我很多次提问，可能我现在还在初级阶段qaq。</strong></p><p><strong>话不多说，记录一下我的创建博客经历吧~希望对你有用！</strong></p><p>先简要陈列一下大致的过程：</p><p>1.相关工具安装</p><p>2.github相关问题处理</p><p>3.换主题！（原来的主题真的太丑……）</p><p>4.发表文章！</p><p>5.嘚瑟一下（bushi）</p><p>下面就一步步慢慢来吧~</p><h2 id="一、相关工具安装"><a href="#一、相关工具安装" class="headerlink" title="一、相关工具安装"></a>一、相关工具安装</h2><h3 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h3><p><strong>Windows端</strong></p><p>到Git官网下载<strong><em>Git Download</em></strong>，安装后就可以用 <strong>Git Bash</strong> 命令行工具来使用Git了。安装好后，在Git Bash中输入git —version检验是否安装成功。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><strong>Windows端</strong></p><p>Node.js官网下载LTS版本，64位msi安装包，安装后分别在命令行（win+R输入cmd调用）输入node -v和npm -v检验PATH环境变量是否配置了Node.js</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>Windows环境进入Git Bash，Linux环境进入终端，开始搭博客啦！</p><p>首先新建一个文件夹blog来存放自己的博客，然后cd进入到这个文件夹下，输入下面的命令安装Hexo:</p><p><strong>npm install -g hexo-cli</strong></p><p>同样，安装完毕后需要hexo -v查看一下版本。</p><p>至此需要的工具都安装完了。接下来初始化一下Hexo:</p><p><strong>hexo init blog</strong></p><p>这里的blog取什么名字都行。</p><p>这时，在你的blog文件夹下会出现一个新的blog文件夹，进入到这个子文件夹后新建Hexo。</p><p><strong>npm install</strong></p><p>新建完成后，指定文件夹目录下应该有以下主要文件：</p><ul><li>node_modules：依赖包</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放自己的文章</li><li>themes：网站主题</li><li>_config.yml：博客的配置文件</li></ul><p><strong>hexo g</strong></p><p><strong>hexo server</strong></p><p>输入以上命令来开启hexo服务，在浏览器中输入localhost:4000就可以看到博客的初始化界面啦，现在还是有点丑丑的。</p><h2 id="二、github相关问题处理"><a href="#二、github相关问题处理" class="headerlink" title="二、github相关问题处理"></a>二、github相关问题处理</h2><p>首先，要做好准备工作，登陆github官网创建个人账号，并且在github中新建一个<strong>和你用户名相同的</strong> 仓库，后面加 <strong>.github.io</strong>，也就是<strong>xxxx.github.io</strong>，只有这样将来要部署到GitHub Page的时候才会被识别。</p><p>这里值得一提的是，github只有英文版，如果英文不太好的友友们（我自己就是）可以用谷歌浏览器打开，让强大的智能替我们翻译一下~</p><h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a><strong>生成SSH添加到GitHub</strong></h3><p>回到Git Bash中，输入以下命令：</p><p><strong>git config —global user.name “yourname”</strong></p><p><strong>git config —global user.email “youremail”</strong></p><p>这里的<strong><em>yourname</em></strong>对应你的GitHub用户名，<strong><em>youremail</em></strong>对应你的GitHub注册邮箱，这样GitHub才能知道你是不是对应它的用户。不放心的话可以用下面两条命令来检查一下：</p><p><strong>git config user.name</strong></p><p><strong>git config user.email</strong></p><p>然后创建SSH，你可以选择密钥的保存位置，然后一路回车。</p><p><strong>ssh-keygen -t rsa -C “youremail”</strong></p><p>这里面可能有一步要输入yes，注意着点就ok</p><p>创建成功后，文件夹下会有两个文件，其中<strong><em>id_rsa</em></strong>是你这台电脑的私人密钥，<strong><em>id_rsa.pub\</em></strong>是公共密钥。把公钥放在GitHub上，这样当你链接GitHub自己的账户时，她就会根据公钥匹配你的私钥，匹配成功才能通过git上传自己的文件到GitHub上。</p><p>在GitHub的setting（右上角头像下拉）中找到<strong><em>SSH and GPG keys</em></strong>的设置选项，点击<strong><em>New SSH key\</em></strong>，把<strong><em>id_rsa.pub\</em></strong>里面的内容复制进去。</p><p>然后回到Git Bash，试试是否配置成功。</p><p>配置成功后，大概率还会收到邮件通知你已经配对成功辣！</p><p>革命成功大半！！！</p><h3 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a><strong>将Hexo部署到GitHub</strong></h3><p>在这步中，我们将要把Hexo和GitHub关联起来，使得Hexo生成的文章都部署到GitHub上。</p><p>打开网站配置文件_config.yml，拉到最后，将deploy部分修改为：</p><p><strong>deploy:</strong></p><p> <strong>type: git</strong></p><p> <strong>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a></strong></p><p> <strong>branch: master</strong></p><p>YourGithubName对应你的GitHub账户</p><p>注意注意注意！这里的所有冒号后面必须要跟一个空格！这里的所有冒号后面必须要跟一个空格！这里的所有冒号后面必须要跟一个空格！重要的事情说三遍！！！</p><p>接下来安装<strong><em>deploy-git</em></strong>，只有这样才能用命令将文章部署到GitHub上：</p><p><strong>npm install hexo-deployer-git —save</strong></p><p>然后进行以下的命令操作：</p><p><strong>hexo clean</strong></p><p><strong>hexo generate</strong></p><p><strong>hexo deploy</strong></p><ul><li><strong>hexo clean</strong>：清除之前生成的东西，在日后新部署文章的时候可以使用，现在加不加没什么区别</li><li><strong>hexo generate</strong>：生成静态文章，缩写“hexo g”</li><li><strong>hexo deploy</strong>：部署文章，缩写“hexo d”</li></ul><p>在浏览器地址栏中输入<a href="https://yourname.github.io就可以看到你的博客网站了！！">https://yourname.github.io就可以看到你的博客网站了！！</a></p><p>开心~~~</p><p>到这里为止，可以说空间的搭建已经完成了，可是有一个问题，那就是太丑辣！！！</p><p>下面跟我一起去修改一下主题吧~</p><h2 id="三、换主题！"><a href="#三、换主题！" class="headerlink" title="三、换主题！"></a>三、换主题！</h2><p>我换的是matery主题，链接奉上~</p><p><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><p>点开链接，打开readme.md文件。</p><p>点击CN中文说明</p><p>跟着作者的步骤一步步走就ok辣</p><p>值得一提的是，有一部分（个性化）作者没有讲明白</p><p>在csdn上找了一篇文章，</p><p><a href="https://blog.csdn.net/qq_41376237/article/details/113475727">https://blog.csdn.net/qq_41376237/article/details/113475727</a></p><p>按着这个连接走可以很好的了解每一部分代码各自的功能~</p><p>换主题这方面还是挺繁琐的，但是只要耐心一步步走完，高人领路，一点不难！</p><h2 id="四、发表文章！"><a href="#四、发表文章！" class="headerlink" title="四、发表文章！"></a>四、发表文章！</h2><p>首先，要下载一个编辑md文件的软件，比如typora（我正在用这个写这篇文章）</p><p>正版软件是要收钱的（好像80y）</p><p>至于小道途径也是有的捏，github上一搜一大把，大家八仙过海各显神通吧~</p><p>（富哥当我没说）</p><p>准备工作完毕！现在编辑好想要发表的文章，开始传到自己的网站上！</p><p><strong>将导出的<code>.md</code>文件复制到hexo博客文件下的<code>/source/_posts</code>文件内；</strong></p><p><strong>复制完成后，用编译器打开这个文件，在第一行加上<code>title</code>；</strong></p><p>title格式如下：</p><p>“—-”</p><p>“title：my blog”</p><p>“—-”</p><p>上文中的引号不用输入。</p><p>命名结束完成后，在/source/_posts文件内鼠标右键点击空白处，选择Git Bash Here：</p><p>输入 hexo g (完整命令为hexo generate)，用于生成静态文件；<br>然后输入 hexo s(完整命令为hexo server)，用于启动服务器，主要用来本地预览；完成后 打开浏览器输入 <a href="http://localhost:4000，会发现多了你刚写的那篇博客">http://localhost:4000，会发现多了你刚写的那篇博客</a>;<br>最后输入hexo d(hexo deploy)，用于将本地文件发布到github等git仓库上；</p><p>最后，文章发布成功！！！</p><p>这样就可以搭建好自己的blog空间啦~</p><p>你学废了吗？</p><p>下注文中一些文字出处，再次对原作者表示感谢！</p><p><a href="https://blog.csdn.net/weixin_45663697/article/details/109008471">https://blog.csdn.net/weixin_45663697/article/details/109008471</a></p><p><a href="https://blog.csdn.net/qq_41376237/article/details/113475727">https://blog.csdn.net/qq_41376237/article/details/113475727</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDk4NzA0MQ==&amp;mid=2650486705&amp;idx=1&amp;sn=a7e5d66faf53b223e90fd091cc42b5c0&amp;chksm=8778f4ffb00f7de9f02f84d74393cb81544037ec9af469fa77be2211a4ca4fc5f29b77bbaab2&amp;mpshare=1&amp;scene=23&amp;srcid=1118oY8SYhnqQImXNlJew7hY&amp;sharer_sharetime=1637318270042&amp;sharer_shareid=f4f1251be68d7d516945f36b7eae3f49#rd">https://mp.weixin.qq.com/s?__biz=MzA3NDk4NzA0MQ==&amp;mid=2650486705&amp;idx=1&amp;sn=a7e5d66faf53b223e90fd091cc42b5c0&amp;chksm=8778f4ffb00f7de9f02f84d74393cb81544037ec9af469fa77be2211a4ca4fc5f29b77bbaab2&amp;mpshare=1&amp;scene=23&amp;srcid=1118oY8SYhnqQImXNlJew7hY&amp;sharer_sharetime=1637318270042&amp;sharer_shareid=f4f1251be68d7d516945f36b7eae3f49#rd</a></p><p>欢迎大家对giggle的空间提出宝贵意见！</p><p>如果你也有了自己的blog空间，可以联系giggle互相建个友情链接哟~</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
